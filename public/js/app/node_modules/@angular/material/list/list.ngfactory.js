/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/list/list';
import * as import2 from '@angular/material/core/compatibility/default-mode';
import * as import3 from '@angular/material/core/line/line';
import * as import5 from '@angular/core/src/linker/view';
import * as import7 from '@angular/core/src/linker/view_utils';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/change_detection/change_detection';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from './list.css';
import * as import13 from '@angular/core/src/linker/query_list';
import * as import14 from '@angular/core/src/linker/element_ref';
var MdListModuleInjector = (function (_super) {
    __extends(MdListModuleInjector, _super);
    function MdListModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(MdListModuleInjector.prototype, "_MATERIAL_COMPATIBILITY_MODE_3", {
        get: function () {
            if ((this.__MATERIAL_COMPATIBILITY_MODE_3 == null)) {
                (this.__MATERIAL_COMPATIBILITY_MODE_3 = false);
            }
            return this.__MATERIAL_COMPATIBILITY_MODE_3;
        },
        enumerable: true,
        configurable: true
    });
    MdListModuleInjector.prototype.createInternal = function () {
        this._DefaultStyleCompatibilityModeModule_0 = new import2.DefaultStyleCompatibilityModeModule();
        this._MdLineModule_1 = new import3.MdLineModule();
        this._MdListModule_2 = new import1.MdListModule();
        return this._MdListModule_2;
    };
    MdListModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_0;
        }
        if ((token === import3.MdLineModule)) {
            return this._MdLineModule_1;
        }
        if ((token === import1.MdListModule)) {
            return this._MdListModule_2;
        }
        if ((token === import2.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_3;
        }
        return notFoundResult;
    };
    MdListModuleInjector.prototype.destroyInternal = function () {
    };
    return MdListModuleInjector;
}(import0.NgModuleInjector));
export var MdListModuleNgFactory = new import0.NgModuleFactory(MdListModuleInjector, import1.MdListModule);
export var Wrapper_MdList = (function () {
    function Wrapper_MdList() {
        this._changed = false;
        this.context = new import1.MdList();
    }
    Wrapper_MdList.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdList.prototype.ngOnDestroy = function () {
    };
    Wrapper_MdList.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdList.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MdList.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdList.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MdList;
}());
export var Wrapper_MdListItem = (function () {
    function Wrapper_MdListItem(p0, p1) {
        this._changed = false;
        this.context = new import1.MdListItem(p0, p1);
    }
    Wrapper_MdListItem.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdListItem.prototype.ngOnDestroy = function () {
    };
    Wrapper_MdListItem.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdListItem.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MdListItem.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'focus')) {
            var pd_sub_0 = (this.context._handleFocus() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'blur')) {
            var pd_sub_1 = (this.context._handleBlur() !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    Wrapper_MdListItem.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MdListItem;
}());
export var Wrapper_MdListDivider = (function () {
    function Wrapper_MdListDivider() {
        this._changed = false;
        this.context = new import1.MdListDivider();
    }
    Wrapper_MdListDivider.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdListDivider.prototype.ngOnDestroy = function () {
    };
    Wrapper_MdListDivider.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdListDivider.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MdListDivider.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdListDivider.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MdListDivider;
}());
export var Wrapper_MdListAvatar = (function () {
    function Wrapper_MdListAvatar() {
        this._changed = false;
        this.context = new import1.MdListAvatar();
    }
    Wrapper_MdListAvatar.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdListAvatar.prototype.ngOnDestroy = function () {
    };
    Wrapper_MdListAvatar.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdListAvatar.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MdListAvatar.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdListAvatar.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MdListAvatar;
}());
var renderType_MdList_Host = import7.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {});
var View_MdList_Host0 = (function (_super) {
    __extends(View_MdList_Host0, _super);
    function View_MdList_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdList_Host0, renderType_MdList_Host, import9.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckAlways);
    }
    View_MdList_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import7.selectOrCreateRenderHostElement(this.renderer, 'md-list', new import7.InlineArray2(2, 'role', 'list'), rootSelector, null);
        this.compView_0 = new View_MdList0(this.viewUtils, this, 0, this._el_0);
        this._MdList_0_3 = new Wrapper_MdList();
        this.compView_0.create(this._MdList_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import11.ComponentRef_(0, this, this._el_0, this._MdList_0_3.context);
    };
    View_MdList_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdList) && (0 === requestNodeIndex))) {
            return this._MdList_0_3.context;
        }
        return notFoundResult;
    };
    View_MdList_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._MdList_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_MdList_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_MdList_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_MdList_Host0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    };
    return View_MdList_Host0;
}(import5.AppView));
export var MdListNgFactory = new import11.ComponentFactory('md-list, mat-list, md-nav-list, mat-nav-list', View_MdList_Host0, import1.MdList);
var styles_MdList = [import12.styles];
var renderType_MdList = import7.createRenderComponentType('', 1, import8.ViewEncapsulation.None, styles_MdList, {});
export var View_MdList0 = (function (_super) {
    __extends(View_MdList0, _super);
    function View_MdList0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdList0, renderType_MdList, import9.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckAlways);
    }
    View_MdList0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.projectNodes(parentRenderNode, 0);
        this.init(null, (this.renderer.directRenderer ? null : []), null);
        return null;
    };
    return View_MdList0;
}(import5.AppView));
var renderType_MdListItem_Host = import7.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {});
var View_MdListItem_Host0 = (function (_super) {
    __extends(View_MdListItem_Host0, _super);
    function View_MdListItem_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdListItem_Host0, renderType_MdListItem_Host, import9.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckAlways);
    }
    View_MdListItem_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import7.selectOrCreateRenderHostElement(this.renderer, 'md-list-item', new import7.InlineArray2(2, 'role', 'listitem'), rootSelector, null);
        this.compView_0 = new View_MdListItem0(this.viewUtils, this, 0, this._el_0);
        this._MdListItem_0_3 = new Wrapper_MdListItem(this.renderer, new import14.ElementRef(this._el_0));
        this._query_MdLine_0_0 = new import13.QueryList();
        this._query_MdListAvatar_0_1 = new import13.QueryList();
        this._query_MdListAvatar_0_1.reset([]);
        this._MdListItem_0_3.context._hasAvatar = this._query_MdListAvatar_0_1.first;
        this.compView_0.create(this._MdListItem_0_3.context);
        var disposable_0 = import7.subscribeToRenderElement(this, this._el_0, new import7.InlineArray4(4, 'focus', null, 'blur', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import11.ComponentRef_(0, this, this._el_0, this._MdListItem_0_3.context);
    };
    View_MdListItem_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdListItem) && (0 === requestNodeIndex))) {
            return this._MdListItem_0_3.context;
        }
        return notFoundResult;
    };
    View_MdListItem_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._MdListItem_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdLine_0_0.dirty) {
                this._query_MdLine_0_0.reset([]);
                this._MdListItem_0_3.context._lines = this._query_MdLine_0_0;
                this._query_MdLine_0_0.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._MdListItem_0_3.context.ngAfterContentInit();
            }
        }
        this.compView_0.detectChanges(throwOnChange);
    };
    View_MdListItem_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_MdListItem_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_MdListItem_Host0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 1))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 2))) { }
    };
    View_MdListItem_Host0.prototype.handleEvent_0 = function (eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdListItem_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return View_MdListItem_Host0;
}(import5.AppView));
export var MdListItemNgFactory = new import11.ComponentFactory('md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]', View_MdListItem_Host0, import1.MdListItem);
var styles_MdListItem = [];
var renderType_MdListItem = import7.createRenderComponentType('', 3, import8.ViewEncapsulation.None, styles_MdListItem, {});
export var View_MdListItem0 = (function (_super) {
    __extends(View_MdListItem0, _super);
    function View_MdListItem0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdListItem0, renderType_MdListItem, import9.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckAlways);
        this._expr_7 = import10.UNINITIALIZED;
    }
    View_MdListItem0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import7.createRenderElement(this.renderer, parentRenderNode, 'div', new import7.InlineArray2(2, 'class', 'md-list-item'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this.projectNodes(this._el_0, 0);
        this._text_2 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_3 = import7.createRenderElement(this.renderer, this._el_0, 'div', new import7.InlineArray2(2, 'class', 'md-list-text'), null);
        this.projectNodes(this._el_3, 1);
        this._text_4 = this.renderer.createText(this._el_0, '\n  ', null);
        this.projectNodes(this._el_0, 2);
        this._text_5 = this.renderer.createText(this._el_0, '\n', null);
        this._text_6 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._text_5,
            this._text_6
        ]), null);
        return null;
    };
    View_MdListItem0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_7 = this.context._hasFocus;
        if (import7.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setElementClass(this._el_0, 'md-list-item-focus', currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    return View_MdListItem0;
}(import5.AppView));
//# sourceMappingURL=list.ngfactory.js.map