/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/toolbar/toolbar';
import * as import2 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/core/src/change_detection/change_detection';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/core/src/linker/element_ref';
import * as import12 from './toolbar.css';
class MdToolbarModuleInjector extends import0.NgModuleInjector {
    constructor(parent) {
        super(parent, [], []);
    }
    get _MATERIAL_COMPATIBILITY_MODE_2() {
        if ((this.__MATERIAL_COMPATIBILITY_MODE_2 == null)) {
            (this.__MATERIAL_COMPATIBILITY_MODE_2 = false);
        }
        return this.__MATERIAL_COMPATIBILITY_MODE_2;
    }
    createInternal() {
        this._DefaultStyleCompatibilityModeModule_0 = new import2.DefaultStyleCompatibilityModeModule();
        this._MdToolbarModule_1 = new import1.MdToolbarModule();
        return this._MdToolbarModule_1;
    }
    getInternal(token, notFoundResult) {
        if ((token === import2.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_0;
        }
        if ((token === import1.MdToolbarModule)) {
            return this._MdToolbarModule_1;
        }
        if ((token === import2.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_2;
        }
        return notFoundResult;
    }
    destroyInternal() {
    }
}
export const MdToolbarModuleNgFactory = new import0.NgModuleFactory(MdToolbarModuleInjector, import1.MdToolbarModule);
export class Wrapper_MdToolbar {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import1.MdToolbar(p0, p1);
        this._expr_0 = import4.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_color(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.color = currValue;
            this._expr_0 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdToolbarRow {
    constructor() {
        this._changed = false;
        this.context = new import1.MdToolbarRow();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_MdToolbar_Host = import6.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {});
class View_MdToolbar_Host0 extends import5.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdToolbar_Host0, renderType_MdToolbar_Host, import9.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import4.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer, 'md-toolbar', import6.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdToolbar0(this.viewUtils, this, 0, this._el_0);
        this._MdToolbar_0_3 = new Wrapper_MdToolbar(new import11.ElementRef(this._el_0), this.renderer);
        this.compView_0.create(this._MdToolbar_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import10.ComponentRef_(0, this, this._el_0, this._MdToolbar_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdToolbar) && (0 === requestNodeIndex))) {
            return this._MdToolbar_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._MdToolbar_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 1))) { }
    }
}
export const MdToolbarNgFactory = new import10.ComponentFactory('md-toolbar, mat-toolbar', View_MdToolbar_Host0, import1.MdToolbar);
const styles_MdToolbar = [import12.styles];
var renderType_MdToolbar = import6.createRenderComponentType('', 2, import8.ViewEncapsulation.None, styles_MdToolbar, {});
export class View_MdToolbar0 extends import5.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdToolbar0, renderType_MdToolbar, import9.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import4.ChangeDetectorStatus.CheckOnce);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import6.createRenderElement(this.renderer, parentRenderNode, 'div', new import6.InlineArray2(2, 'class', 'md-toolbar-layout'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_2 = import6.createRenderElement(this.renderer, this._el_0, 'md-toolbar-row', import6.EMPTY_INLINE_ARRAY, null);
        this._MdToolbarRow_2_3 = new Wrapper_MdToolbarRow();
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this.projectNodes(this._el_2, 0);
        this._text_4 = this.renderer.createText(this._el_2, '\n  ', null);
        this._text_5 = this.renderer.createText(this._el_0, '\n  ', null);
        this.projectNodes(this._el_0, 1);
        this._text_6 = this.renderer.createText(this._el_0, '\n', null);
        this._text_7 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4,
            this._text_5,
            this._text_6,
            this._text_7
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdToolbarRow) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._MdToolbarRow_2_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdToolbarRow_2_3.ngDoCheck(this, this._el_2, throwOnChange);
    }
}
//# sourceMappingURL=toolbar.ngfactory.js.map