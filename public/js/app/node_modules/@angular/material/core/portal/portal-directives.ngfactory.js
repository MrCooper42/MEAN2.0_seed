/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/portal/portal-directives';
import * as import4 from '@angular/core/src/change_detection/change_detection';
import * as import5 from '@angular/core/src/linker/view_utils';
class PortalModuleInjector extends import0.NgModuleInjector {
    constructor(parent) {
        super(parent, [], []);
    }
    createInternal() {
        this._PortalModule_0 = new import1.PortalModule();
        return this._PortalModule_0;
    }
    getInternal(token, notFoundResult) {
        if ((token === import1.PortalModule)) {
            return this._PortalModule_0;
        }
        return notFoundResult;
    }
    destroyInternal() {
    }
}
export const PortalModuleNgFactory = new import0.NgModuleFactory(PortalModuleInjector, import1.PortalModule);
export class Wrapper_TemplatePortalDirective {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import1.TemplatePortalDirective(p0, p1);
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_PortalHostDirective {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import1.PortalHostDirective(p0, p1);
        this._expr_0 = import4.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        this.context.ngOnDestroy();
    }
    check_portal(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import5.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.portal = currValue;
            this._expr_0 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
//# sourceMappingURL=portal-directives.ngfactory.js.map