/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/portal/portal-directives';
import * as import4 from '@angular/core/src/change_detection/change_detection';
import * as import5 from '@angular/core/src/linker/view_utils';
var PortalModuleInjector = (function (_super) {
    __extends(PortalModuleInjector, _super);
    function PortalModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    PortalModuleInjector.prototype.createInternal = function () {
        this._PortalModule_0 = new import1.PortalModule();
        return this._PortalModule_0;
    };
    PortalModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.PortalModule)) {
            return this._PortalModule_0;
        }
        return notFoundResult;
    };
    PortalModuleInjector.prototype.destroyInternal = function () {
    };
    return PortalModuleInjector;
}(import0.NgModuleInjector));
export var PortalModuleNgFactory = new import0.NgModuleFactory(PortalModuleInjector, import1.PortalModule);
export var Wrapper_TemplatePortalDirective = (function () {
    function Wrapper_TemplatePortalDirective(p0, p1) {
        this._changed = false;
        this.context = new import1.TemplatePortalDirective(p0, p1);
    }
    Wrapper_TemplatePortalDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_TemplatePortalDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_TemplatePortalDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_TemplatePortalDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_TemplatePortalDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_TemplatePortalDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_TemplatePortalDirective;
}());
export var Wrapper_PortalHostDirective = (function () {
    function Wrapper_PortalHostDirective(p0, p1) {
        this._changed = false;
        this.context = new import1.PortalHostDirective(p0, p1);
        this._expr_0 = import4.UNINITIALIZED;
    }
    Wrapper_PortalHostDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PortalHostDirective.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
    };
    Wrapper_PortalHostDirective.prototype.check_portal = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import5.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.portal = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_PortalHostDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_PortalHostDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PortalHostDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_PortalHostDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PortalHostDirective;
}());
//# sourceMappingURL=portal-directives.ngfactory.js.map