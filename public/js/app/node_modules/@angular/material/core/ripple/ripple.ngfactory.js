/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/ripple/ripple';
import * as import2 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/core/src/change_detection/change_detection';
import * as import6 from '@angular/core/src/linker/view_utils';
class MdRippleModuleInjector extends import0.NgModuleInjector {
    constructor(parent) {
        super(parent, [], []);
    }
    get _MATERIAL_COMPATIBILITY_MODE_2() {
        if ((this.__MATERIAL_COMPATIBILITY_MODE_2 == null)) {
            (this.__MATERIAL_COMPATIBILITY_MODE_2 = false);
        }
        return this.__MATERIAL_COMPATIBILITY_MODE_2;
    }
    createInternal() {
        this._DefaultStyleCompatibilityModeModule_0 = new import2.DefaultStyleCompatibilityModeModule();
        this._MdRippleModule_1 = new import1.MdRippleModule();
        return this._MdRippleModule_1;
    }
    getInternal(token, notFoundResult) {
        if ((token === import2.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_0;
        }
        if ((token === import1.MdRippleModule)) {
            return this._MdRippleModule_1;
        }
        if ((token === import2.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_2;
        }
        return notFoundResult;
    }
    destroyInternal() {
    }
}
export const MdRippleModuleNgFactory = new import0.NgModuleFactory(MdRippleModuleInjector, import1.MdRippleModule);
export class Wrapper_MdRipple {
    constructor(p0, p1, p2) {
        this._changed = false;
        this._changes = {};
        this.context = new import1.MdRipple(p0, p1, p2);
        this._expr_0 = import4.UNINITIALIZED;
        this._expr_1 = import4.UNINITIALIZED;
        this._expr_2 = import4.UNINITIALIZED;
        this._expr_3 = import4.UNINITIALIZED;
        this._expr_4 = import4.UNINITIALIZED;
        this._expr_5 = import4.UNINITIALIZED;
        this._expr_6 = import4.UNINITIALIZED;
        this._expr_7 = import4.UNINITIALIZED;
        this._expr_8 = import4.UNINITIALIZED;
        this._expr_9 = import4.UNINITIALIZED;
        this._expr_10 = import4.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        this.context.ngOnDestroy();
    }
    check_trigger(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.trigger = currValue;
            this._changes['trigger'] = new import4.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    }
    check_centered(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.centered = currValue;
            this._changes['centered'] = new import4.SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    }
    check_disabled(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._changes['disabled'] = new import4.SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    }
    check_maxRadius(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.maxRadius = currValue;
            this._changes['maxRadius'] = new import4.SimpleChange(this._expr_3, currValue);
            this._expr_3 = currValue;
        }
    }
    check_speedFactor(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.speedFactor = currValue;
            this._changes['speedFactor'] = new import4.SimpleChange(this._expr_4, currValue);
            this._expr_4 = currValue;
        }
    }
    check_color(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.color = currValue;
            this._changes['color'] = new import4.SimpleChange(this._expr_5, currValue);
            this._expr_5 = currValue;
        }
    }
    check_backgroundColor(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this._changed = true;
            this.context.backgroundColor = currValue;
            this._changes['backgroundColor'] = new import4.SimpleChange(this._expr_6, currValue);
            this._expr_6 = currValue;
        }
    }
    check_focused(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_7, currValue))) {
            this._changed = true;
            this.context.focused = currValue;
            this._changes['focused'] = new import4.SimpleChange(this._expr_7, currValue);
            this._expr_7 = currValue;
        }
    }
    check_unbounded(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_8, currValue))) {
            this._changed = true;
            this.context.unbounded = currValue;
            this._changes['unbounded'] = new import4.SimpleChange(this._expr_8, currValue);
            this._expr_8 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_9 = this.context.focused;
        if (import6.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            view.renderer.setElementClass(el, 'md-ripple-focused', currVal_9);
            this._expr_9 = currVal_9;
        }
        const currVal_10 = this.context.unbounded;
        if (import6.checkBinding(throwOnChange, this._expr_10, currVal_10)) {
            view.renderer.setElementClass(el, 'md-ripple-unbounded', currVal_10);
            this._expr_10 = currVal_10;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
//# sourceMappingURL=ripple.ngfactory.js.map