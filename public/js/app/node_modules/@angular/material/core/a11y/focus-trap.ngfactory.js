/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/material/core/a11y/focus-trap';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/material/core/a11y/interactivity-checker';
import * as import9 from '@angular/core/src/zone/ng_zone';
import * as import10 from '@angular/core/src/linker/query_list';
import * as import11 from '@angular/core/src/linker/view_container';
import * as import12 from '../../../common/src/directives/ng_if.ngfactory';
import * as import13 from '@angular/core/src/linker/template_ref';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/common/src/directives/ng_if';
export var Wrapper_FocusTrap = (function () {
    function Wrapper_FocusTrap(p0, p1) {
        this._changed = false;
        this.context = new import0.FocusTrap(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_FocusTrap.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_FocusTrap.prototype.ngOnDestroy = function () {
    };
    Wrapper_FocusTrap.prototype.check_disabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_FocusTrap.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_FocusTrap.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_FocusTrap.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_FocusTrap.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_FocusTrap;
}());
var renderType_FocusTrap_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_FocusTrap_Host0 = (function (_super) {
    __extends(View_FocusTrap_Host0, _super);
    function View_FocusTrap_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_FocusTrap_Host0, renderType_FocusTrap_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_FocusTrap_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'focus-trap', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_FocusTrap0(this.viewUtils, this, 0, this._el_0);
        this._FocusTrap_0_3 = new Wrapper_FocusTrap(this.injectorGet(import8.InteractivityChecker, this.parentIndex), this.injectorGet(import9.NgZone, this.parentIndex));
        this.compView_0.create(this._FocusTrap_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._FocusTrap_0_3.context);
    };
    View_FocusTrap_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.FocusTrap) && (0 === requestNodeIndex))) {
            return this._FocusTrap_0_3.context;
        }
        return notFoundResult;
    };
    View_FocusTrap_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._FocusTrap_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_FocusTrap_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_FocusTrap_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_FocusTrap_Host0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    };
    return View_FocusTrap_Host0;
}(import2.AppView));
export var FocusTrapNgFactory = new import7.ComponentFactory('focus-trap', View_FocusTrap_Host0, import0.FocusTrap);
var styles_FocusTrap = [];
var renderType_FocusTrap = import3.createRenderComponentType('', 1, import5.ViewEncapsulation.None, styles_FocusTrap, {});
export var View_FocusTrap0 = (function (_super) {
    __extends(View_FocusTrap0, _super);
    function View_FocusTrap0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_FocusTrap0, renderType_FocusTrap, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_FocusTrap0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_trappedContent_0 = new import10.QueryList();
        this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_0 = new import11.ViewContainer(0, null, this, this._anchor_0);
        this._TemplateRef_0_5 = new import13.TemplateRef_(this, 0, this._anchor_0);
        this._NgIf_0_6 = new import12.Wrapper_NgIf(this._vc_0.vcRef, this._TemplateRef_0_5);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_2 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', import3.EMPTY_INLINE_ARRAY, null);
        this.projectNodes(this._el_2, 0);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_4 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_4 = new import11.ViewContainer(4, null, this, this._anchor_4);
        this._TemplateRef_4_5 = new import13.TemplateRef_(this, 4, this._anchor_4);
        this._NgIf_4_6 = new import12.Wrapper_NgIf(this._vc_4.vcRef, this._TemplateRef_4_5);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this._viewQuery_trappedContent_0.reset([new import14.ElementRef(this._el_2)]);
        this.context.trappedContent = this._viewQuery_trappedContent_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._anchor_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._anchor_4,
            this._text_5
        ]), null);
        return null;
    };
    View_FocusTrap0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import13.TemplateRef) && (0 === requestNodeIndex))) {
            return this._TemplateRef_0_5;
        }
        if (((token === import15.NgIf) && (0 === requestNodeIndex))) {
            return this._NgIf_0_6.context;
        }
        if (((token === import13.TemplateRef) && (4 === requestNodeIndex))) {
            return this._TemplateRef_4_5;
        }
        if (((token === import15.NgIf) && (4 === requestNodeIndex))) {
            return this._NgIf_4_6.context;
        }
        return notFoundResult;
    };
    View_FocusTrap0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = !this.context.disabled;
        this._NgIf_0_6.check_ngIf(currVal_0_0_0, throwOnChange, false);
        this._NgIf_0_6.ngDoCheck(this, this._anchor_0, throwOnChange);
        var currVal_4_0_0 = !this.context.disabled;
        this._NgIf_4_6.check_ngIf(currVal_4_0_0, throwOnChange, false);
        this._NgIf_4_6.ngDoCheck(this, this._anchor_4, throwOnChange);
        this._vc_0.detectChangesInNestedViews(throwOnChange);
        this._vc_4.detectChangesInNestedViews(throwOnChange);
    };
    View_FocusTrap0.prototype.destroyInternal = function () {
        this._vc_0.destroyNestedViews();
        this._vc_4.destroyNestedViews();
    };
    View_FocusTrap0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 0)) {
            return new View_FocusTrap1(this.viewUtils, this, 0, this._anchor_0, this._vc_0);
        }
        if ((nodeIndex == 4)) {
            return new View_FocusTrap2(this.viewUtils, this, 4, this._anchor_4, this._vc_4);
        }
        return null;
    };
    return View_FocusTrap0;
}(import2.AppView));
var View_FocusTrap1 = (function (_super) {
    __extends(View_FocusTrap1, _super);
    function View_FocusTrap1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_FocusTrap1, renderType_FocusTrap, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_FocusTrap1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'tabindex', '0'), null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'focus', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return null;
    };
    View_FocusTrap1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_FocusTrap1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'focus')) {
            var pd_sub_0 = (this.parentView.context.focusLastTabbableElement() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_FocusTrap1;
}(import2.AppView));
var View_FocusTrap2 = (function (_super) {
    __extends(View_FocusTrap2, _super);
    function View_FocusTrap2(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_FocusTrap2, renderType_FocusTrap, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_FocusTrap2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'tabindex', '0'), null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'focus', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return null;
    };
    View_FocusTrap2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_FocusTrap2.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'focus')) {
            var pd_sub_0 = (this.parentView.context.focusFirstTabbableElement() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_FocusTrap2;
}(import2.AppView));
//# sourceMappingURL=focus-trap.ngfactory.js.map