/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/material/dialog/dialog-container';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/zone/ng_zone';
import * as import9 from './dialog-container.css';
import * as import10 from '@angular/core/src/linker/query_list';
import * as import11 from '@angular/material/core/a11y/focus-trap';
import * as import12 from '../core/a11y/focus-trap.ngfactory';
import * as import13 from '@angular/core/src/linker/view_container';
import * as import14 from '../core/portal/portal-directives.ngfactory';
import * as import15 from '@angular/material/core/a11y/interactivity-checker';
import * as import16 from '@angular/core/src/linker/template_ref';
import * as import17 from '@angular/core/src/linker/component_factory_resolver';
import * as import18 from '@angular/material/core/portal/portal-directives';
export class Wrapper_MdDialogContainer {
    constructor(p0) {
        this._changed = false;
        this.context = new import0.MdDialogContainer(p0);
        this._expr_0 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        this.context.ngOnDestroy();
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_0 = ((this.context.dialogConfig == null) ? null : this.context.dialogConfig.role);
        if (import3.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            view.renderer.setElementAttribute(el, 'role', ((currVal_0 == null) ? null : currVal_0.toString()));
            this._expr_0 = currVal_0;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        if ((eventName == 'keydown.escape')) {
            const pd_sub_0 = (this.context.handleEscapeKey() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_MdDialogContainer_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_MdDialogContainer_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdDialogContainer_Host0, renderType_MdDialogContainer_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'md-dialog-container', new import3.InlineArray2(2, 'class', 'md-dialog-container'), rootSelector, null);
        this.compView_0 = new View_MdDialogContainer0(this.viewUtils, this, 0, this._el_0);
        this._MdDialogContainer_0_3 = new Wrapper_MdDialogContainer(this.injectorGet(import8.NgZone, this.parentIndex));
        this.compView_0.create(this._MdDialogContainer_0_3.context);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'keydown.escape', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import7.ComponentRef_(0, this, this._el_0, this._MdDialogContainer_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.MdDialogContainer) && (0 === requestNodeIndex))) {
            return this._MdDialogContainer_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdDialogContainer_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._MdDialogContainer_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._MdDialogContainer_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    handleEvent_0(eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdDialogContainer_0_3.handleEvent(eventName, $event) && result);
        return result;
    }
}
export const MdDialogContainerNgFactory = new import7.ComponentFactory('md-dialog-container, mat-dialog-container', View_MdDialogContainer_Host0, import0.MdDialogContainer);
const styles_MdDialogContainer = [import9.styles];
var renderType_MdDialogContainer = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_MdDialogContainer, {});
export class View_MdDialogContainer0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdDialogContainer0, renderType_MdDialogContainer, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_PortalHostDirective_0 = new import10.QueryList();
        this._viewQuery_FocusTrap_1 = new import10.QueryList();
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'focus-trap', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new import12.View_FocusTrap0(this.viewUtils, this, 0, this._el_0);
        this._FocusTrap_0_3 = new import12.Wrapper_FocusTrap(this.parentView.injectorGet(import15.InteractivityChecker, this.parentIndex), this.parentView.injectorGet(import8.NgZone, this.parentIndex));
        this._text_1 = this.renderer.createText(null, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(null, null);
        this._vc_2 = new import13.ViewContainer(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this, 2, this._anchor_2);
        this._PortalHostDirective_2_6 = new import14.Wrapper_PortalHostDirective(this.parentView.injectorGet(import17.ComponentFactoryResolver, this.parentIndex), this._vc_2.vcRef);
        this._text_3 = this.renderer.createText(null, '\n', null);
        this.compView_0.create(this._FocusTrap_0_3.context);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this._viewQuery_PortalHostDirective_0.reset([this._PortalHostDirective_2_6.context]);
        this.context._portalHost = this._viewQuery_PortalHostDirective_0.first;
        this._viewQuery_FocusTrap_1.reset([this._FocusTrap_0_3.context]);
        this.context._focusTrap = this._viewQuery_FocusTrap_1.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._text_4
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import18.PortalHostDirective) && (2 === requestNodeIndex))) {
            return this._PortalHostDirective_2_6.context;
        }
        if (((token === import11.FocusTrap) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._FocusTrap_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._FocusTrap_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_2_0_0 = '';
        this._PortalHostDirective_2_6.check_portal(currVal_2_0_0, throwOnChange, false);
        this._PortalHostDirective_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this._vc_2.destroyNestedViews();
        this.compView_0.destroy();
        this._PortalHostDirective_2_6.ngOnDestroy();
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) {
            cb(this._text_1, ctx);
            cb(this._vc_2.nativeElement, ctx);
            this._vc_2.visitNestedViewRootNodes(cb, ctx);
            cb(this._text_3, ctx);
        }
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 2)) {
            return new View_MdDialogContainer1(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    }
}
class View_MdDialogContainer1 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdDialogContainer1, renderType_MdDialogContainer, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._el_0 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : []), null);
        return null;
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
//# sourceMappingURL=dialog-container.ngfactory.js.map