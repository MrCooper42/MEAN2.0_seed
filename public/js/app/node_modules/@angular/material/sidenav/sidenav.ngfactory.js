/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/sidenav/sidenav';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/material/core/platform/platform';
import * as import5 from '@angular/material/core/a11y/index';
import * as import6 from '@angular/common/src/localization';
import * as import8 from '@angular/core/src/i18n/tokens';
import * as import9 from '@angular/core/src/linker/view';
import * as import10 from '@angular/core/src/change_detection/change_detection';
import * as import11 from '@angular/core/src/linker/view_utils';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/query_list';
import * as import15 from '@angular/core/src/linker/view_type';
import * as import16 from '@angular/core/src/linker/component_factory';
import * as import17 from '@angular/material/core/rtl/dir';
import * as import18 from '@angular/core/src/linker/element_ref';
import * as import19 from './sidenav.css';
import * as import20 from './sidenav-transitions.css';
import * as import21 from '../../common/src/directives/ng_style.ngfactory';
import * as import22 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import23 from '@angular/common/src/directives/ng_style';
import * as import24 from '@angular/material/core/a11y/focus-trap';
import * as import25 from '../core/a11y/focus-trap.ngfactory';
import * as import26 from '@angular/material/core/a11y/interactivity-checker';
import * as import27 from '@angular/core/src/zone/ng_zone';
class MdSidenavModuleInjector extends import0.NgModuleInjector {
    constructor(parent) {
        super(parent, [], []);
    }
    get _NgLocalization_5() {
        if ((this.__NgLocalization_5 == null)) {
            (this.__NgLocalization_5 = new import6.NgLocaleLocalization(this.parent.get(import8.LOCALE_ID)));
        }
        return this.__NgLocalization_5;
    }
    get _MATERIAL_COMPATIBILITY_MODE_6() {
        if ((this.__MATERIAL_COMPATIBILITY_MODE_6 == null)) {
            (this.__MATERIAL_COMPATIBILITY_MODE_6 = false);
        }
        return this.__MATERIAL_COMPATIBILITY_MODE_6;
    }
    createInternal() {
        this._CommonModule_0 = new import2.CommonModule();
        this._DefaultStyleCompatibilityModeModule_1 = new import3.DefaultStyleCompatibilityModeModule();
        this._PlatformModule_2 = new import4.PlatformModule();
        this._A11yModule_3 = new import5.A11yModule();
        this._MdSidenavModule_4 = new import1.MdSidenavModule();
        return this._MdSidenavModule_4;
    }
    getInternal(token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_1;
        }
        if ((token === import4.PlatformModule)) {
            return this._PlatformModule_2;
        }
        if ((token === import5.A11yModule)) {
            return this._A11yModule_3;
        }
        if ((token === import1.MdSidenavModule)) {
            return this._MdSidenavModule_4;
        }
        if ((token === import6.NgLocalization)) {
            return this._NgLocalization_5;
        }
        if ((token === import3.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_6;
        }
        return notFoundResult;
    }
    destroyInternal() {
    }
}
export const MdSidenavModuleNgFactory = new import0.NgModuleFactory(MdSidenavModuleInjector, import1.MdSidenavModule);
export class Wrapper_MdSidenavLayout {
    constructor(p0, p1, p2) {
        this._changed = false;
        this.context = new import1.MdSidenavLayout(p0, p1, p2);
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        (this.subscription0 && this.subscription0.unsubscribe());
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onBackdropClicked.subscribe(_eventHandler.bind(view, 'backdrop-clicked')));
        }
    }
}
export class Wrapper_MdSidenav {
    constructor(p0) {
        this._changed = false;
        this.context = new import1.MdSidenav(p0);
        this._expr_0 = import10.UNINITIALIZED;
        this._expr_1 = import10.UNINITIALIZED;
        this._expr_2 = import10.UNINITIALIZED;
        this._expr_3 = import10.UNINITIALIZED;
        this._expr_4 = import10.UNINITIALIZED;
        this._expr_5 = import10.UNINITIALIZED;
        this._expr_6 = import10.UNINITIALIZED;
        this._expr_7 = import10.UNINITIALIZED;
        this._expr_8 = import10.UNINITIALIZED;
        this._expr_9 = import10.UNINITIALIZED;
        this._expr_10 = import10.UNINITIALIZED;
        this._expr_11 = import10.UNINITIALIZED;
        this._expr_12 = import10.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
        (this.subscription3 && this.subscription3.unsubscribe());
        (this.subscription4 && this.subscription4.unsubscribe());
    }
    check_align(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import11.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.align = currValue;
            this._expr_0 = currValue;
        }
    }
    check_mode(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import11.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.mode = currValue;
            this._expr_1 = currValue;
        }
    }
    check_opened(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import11.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.opened = currValue;
            this._expr_2 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_3 = null;
        if (import11.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            view.renderer.setElementAttribute(el, 'align', ((currVal_3 == null) ? null : currVal_3.toString()));
            this._expr_3 = currVal_3;
        }
        const currVal_4 = this.context._isClosed;
        if (import11.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementClass(el, 'md-sidenav-closed', currVal_4);
            this._expr_4 = currVal_4;
        }
        const currVal_5 = this.context._isClosing;
        if (import11.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementClass(el, 'md-sidenav-closing', currVal_5);
            this._expr_5 = currVal_5;
        }
        const currVal_6 = this.context._isEnd;
        if (import11.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            view.renderer.setElementClass(el, 'md-sidenav-end', currVal_6);
            this._expr_6 = currVal_6;
        }
        const currVal_7 = this.context._isOpened;
        if (import11.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            view.renderer.setElementClass(el, 'md-sidenav-opened', currVal_7);
            this._expr_7 = currVal_7;
        }
        const currVal_8 = this.context._isOpening;
        if (import11.checkBinding(throwOnChange, this._expr_8, currVal_8)) {
            view.renderer.setElementClass(el, 'md-sidenav-opening', currVal_8);
            this._expr_8 = currVal_8;
        }
        const currVal_9 = this.context._modeOver;
        if (import11.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            view.renderer.setElementClass(el, 'md-sidenav-over', currVal_9);
            this._expr_9 = currVal_9;
        }
        const currVal_10 = this.context._modePush;
        if (import11.checkBinding(throwOnChange, this._expr_10, currVal_10)) {
            view.renderer.setElementClass(el, 'md-sidenav-push', currVal_10);
            this._expr_10 = currVal_10;
        }
        const currVal_11 = this.context._modeSide;
        if (import11.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            view.renderer.setElementClass(el, 'md-sidenav-side', currVal_11);
            this._expr_11 = currVal_11;
        }
        const currVal_12 = !this.context.valid;
        if (import11.checkBinding(throwOnChange, this._expr_12, currVal_12)) {
            view.renderer.setElementClass(el, 'md-sidenav-invalid', currVal_12);
            this._expr_12 = currVal_12;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        if ((eventName == 'transitionend')) {
            const pd_sub_0 = (this.context._onTransitionEnd($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1, emit2, emit3, emit4) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onOpenStart.subscribe(_eventHandler.bind(view, 'open-start')));
        }
        if (emit1) {
            (this.subscription1 = this.context.onOpen.subscribe(_eventHandler.bind(view, 'open')));
        }
        if (emit2) {
            (this.subscription2 = this.context.onCloseStart.subscribe(_eventHandler.bind(view, 'close-start')));
        }
        if (emit3) {
            (this.subscription3 = this.context.onClose.subscribe(_eventHandler.bind(view, 'close')));
        }
        if (emit4) {
            (this.subscription4 = this.context.onAlignChanged.subscribe(_eventHandler.bind(view, 'align-changed')));
        }
    }
}
var renderType_MdSidenavLayout_Host = import11.createRenderComponentType('', 0, import13.ViewEncapsulation.None, [], {});
class View_MdSidenavLayout_Host0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdSidenavLayout_Host0, renderType_MdSidenavLayout_Host, import15.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import11.selectOrCreateRenderHostElement(this.renderer, 'md-sidenav-layout', import11.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdSidenavLayout0(this.viewUtils, this, 0, this._el_0);
        this._MdSidenavLayout_0_3 = new Wrapper_MdSidenavLayout(this.injectorGet(import17.Dir, this.parentIndex, null), new import18.ElementRef(this._el_0), this.renderer);
        this._query_MdSidenav_0_0 = new import14.QueryList();
        this.compView_0.create(this._MdSidenavLayout_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import16.ComponentRef_(0, this, this._el_0, this._MdSidenavLayout_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdSidenavLayout) && (0 === requestNodeIndex))) {
            return this._MdSidenavLayout_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdSidenavLayout_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdSidenav_0_0.dirty) {
                this._query_MdSidenav_0_0.reset([]);
                this._MdSidenavLayout_0_3.context._sidenavs = this._query_MdSidenav_0_0;
                this._query_MdSidenav_0_0.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._MdSidenavLayout_0_3.context.ngAfterContentInit();
            }
        }
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._MdSidenavLayout_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 1))) { }
    }
}
export const MdSidenavLayoutNgFactory = new import16.ComponentFactory('md-sidenav-layout, mat-sidenav-layout', View_MdSidenavLayout_Host0, import1.MdSidenavLayout);
const styles_MdSidenavLayout = [
    import19.styles,
    import20.styles
];
var renderType_MdSidenavLayout = import11.createRenderComponentType('', 2, import13.ViewEncapsulation.None, styles_MdSidenavLayout, {});
export class View_MdSidenavLayout0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdSidenavLayout0, renderType_MdSidenavLayout, import15.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckAlways);
        this._expr_8 = import10.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import11.createRenderElement(this.renderer, parentRenderNode, 'div', new import11.InlineArray2(2, 'class', 'md-sidenav-backdrop'), null);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this.projectNodes(parentRenderNode, 0);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_3 = import11.createRenderElement(this.renderer, parentRenderNode, 'div', new import11.InlineArray2(2, 'class', 'md-sidenav-content'), null);
        this._NgStyle_3_3 = new import21.Wrapper_NgStyle(this.parentView.injectorGet(import22.KeyValueDiffers, this.parentIndex), new import18.ElementRef(this._el_3), this.renderer);
        this._text_4 = this.renderer.createText(this._el_3, '\n  ', null);
        this.projectNodes(this._el_3, 1);
        this._text_5 = this.renderer.createText(this._el_3, '\n', null);
        this._text_6 = this.renderer.createText(parentRenderNode, '\n', null);
        var disposable_0 = import11.subscribeToRenderElement(this, this._el_0, new import11.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._text_5,
            this._text_6
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import23.NgStyle) && ((3 <= requestNodeIndex) && (requestNodeIndex <= 5)))) {
            return this._NgStyle_3_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_3_0_0 = this.context._getStyles();
        this._NgStyle_3_3.check_ngStyle(currVal_3_0_0, throwOnChange, false);
        this._NgStyle_3_3.ngDoCheck(this, this._el_3, throwOnChange);
        const currVal_8 = this.context._isShowingBackdrop();
        if (import11.checkBinding(throwOnChange, this._expr_8, currVal_8)) {
            this.renderer.setElementClass(this._el_0, 'md-sidenav-shown', currVal_8);
            this._expr_8 = currVal_8;
        }
    }
    handleEvent_0(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = (this.context._onBackdropClicked() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}
var renderType_MdSidenav_Host = import11.createRenderComponentType('', 0, import13.ViewEncapsulation.None, [], {});
class View_MdSidenav_Host0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdSidenav_Host0, renderType_MdSidenav_Host, import15.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import11.selectOrCreateRenderHostElement(this.renderer, 'md-sidenav', import11.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdSidenav0(this.viewUtils, this, 0, this._el_0);
        this._MdSidenav_0_3 = new Wrapper_MdSidenav(new import18.ElementRef(this._el_0));
        this.compView_0.create(this._MdSidenav_0_3.context);
        var disposable_0 = import11.subscribeToRenderElement(this, this._el_0, new import11.InlineArray2(2, 'transitionend', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import16.ComponentRef_(0, this, this._el_0, this._MdSidenav_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdSidenav) && (0 === requestNodeIndex))) {
            return this._MdSidenav_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._MdSidenav_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._MdSidenav_0_3.context.ngAfterContentInit();
            }
        }
        this._MdSidenav_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._MdSidenav_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    }
    handleEvent_0(eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdSidenav_0_3.handleEvent(eventName, $event) && result);
        return result;
    }
}
export const MdSidenavNgFactory = new import16.ComponentFactory('md-sidenav, mat-sidenav', View_MdSidenav_Host0, import1.MdSidenav);
const styles_MdSidenav = [];
var renderType_MdSidenav = import11.createRenderComponentType('', 1, import13.ViewEncapsulation.None, styles_MdSidenav, {});
export class View_MdSidenav0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdSidenav0, renderType_MdSidenav, import15.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import10.ChangeDetectorStatus.CheckOnce);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_FocusTrap_0 = new import14.QueryList();
        this._el_0 = import11.createRenderElement(this.renderer, parentRenderNode, 'focus-trap', import11.EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new import25.View_FocusTrap0(this.viewUtils, this, 0, this._el_0);
        this._FocusTrap_0_3 = new import25.Wrapper_FocusTrap(this.parentView.injectorGet(import26.InteractivityChecker, this.parentIndex), this.parentView.injectorGet(import27.NgZone, this.parentIndex));
        this.compView_0.create(this._FocusTrap_0_3.context);
        this._viewQuery_FocusTrap_0.reset([this._FocusTrap_0_3.context]);
        this.context._focusTrap = this._viewQuery_FocusTrap_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import24.FocusTrap) && (0 === requestNodeIndex))) {
            return this._FocusTrap_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = this.context.isFocusTrapDisabled;
        this._FocusTrap_0_3.check_disabled(currVal_0_0_0, throwOnChange, false);
        this._FocusTrap_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) {
            this.visitProjectedNodes(0, cb, ctx);
        }
    }
}
//# sourceMappingURL=sidenav.ngfactory.js.map