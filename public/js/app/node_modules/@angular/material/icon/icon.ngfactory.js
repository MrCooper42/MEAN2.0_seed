/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/icon/icon';
import * as import2 from '@angular/http/src/http_module';
import * as import3 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/http/src/backends/browser_xhr';
import * as import5 from '@angular/http/src/base_response_options';
import * as import6 from '@angular/http/src/backends/xhr_backend';
import * as import7 from '@angular/http/src/base_request_options';
import * as import9 from '@angular/http/src/interfaces';
import * as import10 from '@angular/http/src/http';
import * as import11 from '@angular/core/src/change_detection/change_detection';
import * as import12 from '@angular/core/src/linker/view';
import * as import13 from '@angular/core/src/linker/view_utils';
import * as import15 from '@angular/core/src/metadata/view';
import * as import16 from '@angular/core/src/linker/view_type';
import * as import17 from '@angular/core/src/linker/component_factory';
import * as import18 from '@angular/core/src/linker/element_ref';
import * as import19 from '@angular/material/icon/icon-registry';
import * as import20 from './icon.css';
var MdIconModuleInjector = (function (_super) {
    __extends(MdIconModuleInjector, _super);
    function MdIconModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(MdIconModuleInjector.prototype, "_BrowserXhr_3", {
        get: function () {
            if ((this.__BrowserXhr_3 == null)) {
                (this.__BrowserXhr_3 = new import4.BrowserXhr());
            }
            return this.__BrowserXhr_3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_ResponseOptions_4", {
        get: function () {
            if ((this.__ResponseOptions_4 == null)) {
                (this.__ResponseOptions_4 = new import5.BaseResponseOptions());
            }
            return this.__ResponseOptions_4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_XSRFStrategy_5", {
        get: function () {
            if ((this.__XSRFStrategy_5 == null)) {
                (this.__XSRFStrategy_5 = import2._createDefaultCookieXSRFStrategy());
            }
            return this.__XSRFStrategy_5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_XHRBackend_6", {
        get: function () {
            if ((this.__XHRBackend_6 == null)) {
                (this.__XHRBackend_6 = new import6.XHRBackend(this._BrowserXhr_3, this._ResponseOptions_4, this._XSRFStrategy_5));
            }
            return this.__XHRBackend_6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_RequestOptions_7", {
        get: function () {
            if ((this.__RequestOptions_7 == null)) {
                (this.__RequestOptions_7 = new import7.BaseRequestOptions());
            }
            return this.__RequestOptions_7;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_Http_8", {
        get: function () {
            if ((this.__Http_8 == null)) {
                (this.__Http_8 = import2.httpFactory(this._XHRBackend_6, this._RequestOptions_7));
            }
            return this.__Http_8;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_MATERIAL_COMPATIBILITY_MODE_9", {
        get: function () {
            if ((this.__MATERIAL_COMPATIBILITY_MODE_9 == null)) {
                (this.__MATERIAL_COMPATIBILITY_MODE_9 = false);
            }
            return this.__MATERIAL_COMPATIBILITY_MODE_9;
        },
        enumerable: true,
        configurable: true
    });
    MdIconModuleInjector.prototype.createInternal = function () {
        this._HttpModule_0 = new import2.HttpModule();
        this._DefaultStyleCompatibilityModeModule_1 = new import3.DefaultStyleCompatibilityModeModule();
        this._MdIconModule_2 = new import1.MdIconModule();
        return this._MdIconModule_2;
    };
    MdIconModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.HttpModule)) {
            return this._HttpModule_0;
        }
        if ((token === import3.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_1;
        }
        if ((token === import1.MdIconModule)) {
            return this._MdIconModule_2;
        }
        if ((token === import4.BrowserXhr)) {
            return this._BrowserXhr_3;
        }
        if ((token === import5.ResponseOptions)) {
            return this._ResponseOptions_4;
        }
        if ((token === import9.XSRFStrategy)) {
            return this._XSRFStrategy_5;
        }
        if ((token === import6.XHRBackend)) {
            return this._XHRBackend_6;
        }
        if ((token === import7.RequestOptions)) {
            return this._RequestOptions_7;
        }
        if ((token === import10.Http)) {
            return this._Http_8;
        }
        if ((token === import3.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_9;
        }
        return notFoundResult;
    };
    MdIconModuleInjector.prototype.destroyInternal = function () {
    };
    return MdIconModuleInjector;
}(import0.NgModuleInjector));
export var MdIconModuleNgFactory = new import0.NgModuleFactory(MdIconModuleInjector, import1.MdIconModule);
export var Wrapper_MdIcon = (function () {
    function Wrapper_MdIcon(p0, p1, p2) {
        this._changed = false;
        this._changes = {};
        this.context = new import1.MdIcon(p0, p1, p2);
        this._expr_0 = import11.UNINITIALIZED;
        this._expr_1 = import11.UNINITIALIZED;
        this._expr_2 = import11.UNINITIALIZED;
        this._expr_3 = import11.UNINITIALIZED;
        this._expr_4 = import11.UNINITIALIZED;
        this._expr_5 = import11.UNINITIALIZED;
        this._expr_6 = import11.UNINITIALIZED;
    }
    Wrapper_MdIcon.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdIcon.prototype.ngOnDestroy = function () {
    };
    Wrapper_MdIcon.prototype.check_svgSrc = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import13.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.svgSrc = currValue;
            this._changes['svgSrc'] = new import11.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_MdIcon.prototype.check_svgIcon = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import13.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.svgIcon = currValue;
            this._changes['svgIcon'] = new import11.SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    };
    Wrapper_MdIcon.prototype.check_fontSet = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import13.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.fontSet = currValue;
            this._changes['fontSet'] = new import11.SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    };
    Wrapper_MdIcon.prototype.check_fontIcon = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import13.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.fontIcon = currValue;
            this._changes['fontIcon'] = new import11.SimpleChange(this._expr_3, currValue);
            this._expr_3 = currValue;
        }
    };
    Wrapper_MdIcon.prototype.check_alt = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import13.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.alt = currValue;
            this._changes['alt'] = new import11.SimpleChange(this._expr_4, currValue);
            this._expr_4 = currValue;
        }
    };
    Wrapper_MdIcon.prototype.check_hostAriaLabel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import13.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.hostAriaLabel = currValue;
            this._changes['hostAriaLabel'] = new import11.SimpleChange(this._expr_5, currValue);
            this._expr_5 = currValue;
        }
    };
    Wrapper_MdIcon.prototype.check_color = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import13.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this._changed = true;
            this.context.color = currValue;
            this._changes['color'] = new import11.SimpleChange(this._expr_6, currValue);
            this._expr_6 = currValue;
        }
    };
    Wrapper_MdIcon.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_MdIcon.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MdIcon.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdIcon.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MdIcon;
}());
var renderType_MdIcon_Host = import13.createRenderComponentType('', 0, import15.ViewEncapsulation.None, [], {});
var View_MdIcon_Host0 = (function (_super) {
    __extends(View_MdIcon_Host0, _super);
    function View_MdIcon_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdIcon_Host0, renderType_MdIcon_Host, import16.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import11.ChangeDetectorStatus.CheckAlways);
    }
    View_MdIcon_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import13.selectOrCreateRenderHostElement(this.renderer, 'md-icon', new import13.InlineArray2(2, 'role', 'img'), rootSelector, null);
        this.compView_0 = new View_MdIcon0(this.viewUtils, this, 0, this._el_0);
        this._MdIcon_0_3 = new Wrapper_MdIcon(new import18.ElementRef(this._el_0), this.renderer, this.injectorGet(import19.MdIconRegistry, this.parentIndex));
        this.compView_0.create(this._MdIcon_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import17.ComponentRef_(0, this, this._el_0, this._MdIcon_0_3.context);
    };
    View_MdIcon_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdIcon) && (0 === requestNodeIndex))) {
            return this._MdIcon_0_3.context;
        }
        return notFoundResult;
    };
    View_MdIcon_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (this._MdIcon_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            this._MdIcon_0_3.context.ngAfterViewChecked();
        }
    };
    View_MdIcon_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_MdIcon_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_MdIcon_Host0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    };
    return View_MdIcon_Host0;
}(import12.AppView));
export var MdIconNgFactory = new import17.ComponentFactory('md-icon, mat-icon', View_MdIcon_Host0, import1.MdIcon);
var styles_MdIcon = [import20.styles];
var renderType_MdIcon = import13.createRenderComponentType('', 1, import15.ViewEncapsulation.None, styles_MdIcon, {});
export var View_MdIcon0 = (function (_super) {
    __extends(View_MdIcon0, _super);
    function View_MdIcon0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdIcon0, renderType_MdIcon, import16.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import11.ChangeDetectorStatus.CheckOnce);
    }
    View_MdIcon0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.projectNodes(parentRenderNode, 0);
        this.init(null, (this.renderer.directRenderer ? null : []), null);
        return null;
    };
    return View_MdIcon0;
}(import12.AppView));
//# sourceMappingURL=icon.ngfactory.js.map