/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/material/snack-bar/simple-snack-bar';
import * as import1 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from './simple-snack-bar.css.shim';
import * as import9 from '@angular/core/src/linker/view_container';
import * as import10 from '../../common/src/directives/ng_if.ngfactory';
import * as import11 from '@angular/core/src/linker/template_ref';
import * as import12 from '@angular/common/src/directives/ng_if';
export class Wrapper_SimpleSnackBar {
    constructor() {
        this._changed = false;
        this.context = new import0.SimpleSnackBar();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_SimpleSnackBar_Host = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, [], {});
class View_SimpleSnackBar_Host0 extends import1.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_SimpleSnackBar_Host0, renderType_SimpleSnackBar_Host, import5.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'simple-snack-bar', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_SimpleSnackBar0(this.viewUtils, this, 0, this._el_0);
        this._SimpleSnackBar_0_3 = new Wrapper_SimpleSnackBar();
        this.compView_0.create(this._SimpleSnackBar_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._SimpleSnackBar_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.SimpleSnackBar) && (0 === requestNodeIndex))) {
            return this._SimpleSnackBar_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._SimpleSnackBar_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
export const SimpleSnackBarNgFactory = new import7.ComponentFactory('simple-snack-bar', View_SimpleSnackBar_Host0, import0.SimpleSnackBar);
const styles_SimpleSnackBar = [import8.styles];
var renderType_SimpleSnackBar = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.Emulated, styles_SimpleSnackBar, {});
export class View_SimpleSnackBar0 extends import1.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_SimpleSnackBar0, renderType_SimpleSnackBar, import5.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
        this._expr_7 = import6.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'span', new import3.InlineArray2(2, 'class', 'md-simple-snackbar-message'), null);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_3 = new import9.ViewContainer(3, null, this, this._anchor_3);
        this._TemplateRef_3_5 = new import11.TemplateRef_(this, 3, this._anchor_3);
        this._NgIf_3_6 = new import10.Wrapper_NgIf(this._vc_3.vcRef, this._TemplateRef_3_5);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._text_2,
            this._anchor_3
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import11.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import12.NgIf) && (3 === requestNodeIndex))) {
            return this._NgIf_3_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_3_0_0 = this.context.hasAction;
        this._NgIf_3_6.check_ngIf(currVal_3_0_0, throwOnChange, false);
        this._NgIf_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        this._vc_3.detectChangesInNestedViews(throwOnChange);
        const currVal_7 = import3.inlineInterpolate(1, '', this.context.message, '');
        if (import3.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_1, currVal_7);
            this._expr_7 = currVal_7;
        }
    }
    destroyInternal() {
        this._vc_3.destroyNestedViews();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 3)) {
            return new View_SimpleSnackBar1(this.viewUtils, this, 3, this._anchor_3, this._vc_3);
        }
        return null;
    }
}
class View_SimpleSnackBar1 extends import1.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_SimpleSnackBar1, renderType_SimpleSnackBar, import5.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_2 = import6.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'button', new import3.InlineArray4(4, 'class', 'md-simple-snackbar-action', 'md-button', ''), null);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1
        ]), [disposable_0]);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_2 = import3.inlineInterpolate(1, '', this.parentView.context.action, '');
        if (import3.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setText(this._text_1, currVal_2);
            this._expr_2 = currVal_2;
        }
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    handleEvent_0(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = (this.parentView.context.dismiss() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}
//# sourceMappingURL=simple-snack-bar.ngfactory.js.map