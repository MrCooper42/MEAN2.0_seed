/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/checkbox/checkbox';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/material/core/ripple/ripple';
import * as import5 from '@angular/common/src/localization';
import * as import7 from '@angular/core/src/i18n/tokens';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/linker/view';
import * as import10 from '@angular/core/src/linker/view_utils';
import * as import12 from '@angular/core/src/metadata/view';
import * as import13 from '@angular/core/src/linker/view_type';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/forms/src/directives/control_value_accessor';
import * as import17 from './checkbox.css';
import * as import18 from '@angular/core/src/linker/query_list';
import * as import19 from '@angular/core/src/linker/view_container';
import * as import20 from '../../common/src/directives/ng_if.ngfactory';
import * as import21 from '@angular/core/src/linker/template_ref';
import * as import22 from '@angular/common/src/directives/ng_if';
import * as import23 from '../core/ripple/ripple.ngfactory';
import * as import24 from '@angular/core/src/zone/ng_zone';
import * as import25 from '@angular/material/core/overlay/position/viewport-ruler';
var MdCheckboxModuleInjector = (function (_super) {
    __extends(MdCheckboxModuleInjector, _super);
    function MdCheckboxModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(MdCheckboxModuleInjector.prototype, "_NgLocalization_4", {
        get: function () {
            if ((this.__NgLocalization_4 == null)) {
                (this.__NgLocalization_4 = new import5.NgLocaleLocalization(this.parent.get(import7.LOCALE_ID)));
            }
            return this.__NgLocalization_4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCheckboxModuleInjector.prototype, "_MATERIAL_COMPATIBILITY_MODE_5", {
        get: function () {
            if ((this.__MATERIAL_COMPATIBILITY_MODE_5 == null)) {
                (this.__MATERIAL_COMPATIBILITY_MODE_5 = false);
            }
            return this.__MATERIAL_COMPATIBILITY_MODE_5;
        },
        enumerable: true,
        configurable: true
    });
    MdCheckboxModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import2.CommonModule();
        this._DefaultStyleCompatibilityModeModule_1 = new import3.DefaultStyleCompatibilityModeModule();
        this._MdRippleModule_2 = new import4.MdRippleModule();
        this._MdCheckboxModule_3 = new import1.MdCheckboxModule();
        return this._MdCheckboxModule_3;
    };
    MdCheckboxModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_1;
        }
        if ((token === import4.MdRippleModule)) {
            return this._MdRippleModule_2;
        }
        if ((token === import1.MdCheckboxModule)) {
            return this._MdCheckboxModule_3;
        }
        if ((token === import5.NgLocalization)) {
            return this._NgLocalization_4;
        }
        if ((token === import3.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_5;
        }
        return notFoundResult;
    };
    MdCheckboxModuleInjector.prototype.destroyInternal = function () {
    };
    return MdCheckboxModuleInjector;
}(import0.NgModuleInjector));
export var MdCheckboxModuleNgFactory = new import0.NgModuleFactory(MdCheckboxModuleInjector, import1.MdCheckboxModule);
export var Wrapper_MdCheckbox = (function () {
    function Wrapper_MdCheckbox(p0, p1, p2) {
        this._changed = false;
        this.context = new import1.MdCheckbox(p0, p1, p2);
        this._expr_0 = import8.UNINITIALIZED;
        this._expr_1 = import8.UNINITIALIZED;
        this._expr_2 = import8.UNINITIALIZED;
        this._expr_3 = import8.UNINITIALIZED;
        this._expr_4 = import8.UNINITIALIZED;
        this._expr_5 = import8.UNINITIALIZED;
        this._expr_6 = import8.UNINITIALIZED;
        this._expr_7 = import8.UNINITIALIZED;
        this._expr_8 = import8.UNINITIALIZED;
        this._expr_9 = import8.UNINITIALIZED;
        this._expr_10 = import8.UNINITIALIZED;
        this._expr_11 = import8.UNINITIALIZED;
        this._expr_12 = import8.UNINITIALIZED;
        this._expr_13 = import8.UNINITIALIZED;
        this._expr_14 = import8.UNINITIALIZED;
        this._expr_15 = import8.UNINITIALIZED;
        this._expr_16 = import8.UNINITIALIZED;
    }
    Wrapper_MdCheckbox.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdCheckbox.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_MdCheckbox.prototype.check_ariaLabel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ariaLabel = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_ariaLabelledby = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.ariaLabelledby = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_id = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.id = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_disableRipple = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.disableRipple = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_required = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.required = currValue;
            this._expr_4 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_align = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.align = currValue;
            this._expr_5 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_disabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_6 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_tabindex = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_7, currValue))) {
            this._changed = true;
            this.context.tabindex = currValue;
            this._expr_7 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_name = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_8, currValue))) {
            this._changed = true;
            this.context.name = currValue;
            this._expr_8 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_checked = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_9, currValue))) {
            this._changed = true;
            this.context.checked = currValue;
            this._expr_9 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_indeterminate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_10, currValue))) {
            this._changed = true;
            this.context.indeterminate = currValue;
            this._expr_10 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.check_color = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_11, currValue))) {
            this._changed = true;
            this.context.color = currValue;
            this._expr_11 = currValue;
        }
    };
    Wrapper_MdCheckbox.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdCheckbox.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_12 = this.context.indeterminate;
        if (import10.checkBinding(throwOnChange, this._expr_12, currVal_12)) {
            view.renderer.setElementClass(el, 'md-checkbox-indeterminate', currVal_12);
            this._expr_12 = currVal_12;
        }
        var currVal_13 = this.context.checked;
        if (import10.checkBinding(throwOnChange, this._expr_13, currVal_13)) {
            view.renderer.setElementClass(el, 'md-checkbox-checked', currVal_13);
            this._expr_13 = currVal_13;
        }
        var currVal_14 = this.context.disabled;
        if (import10.checkBinding(throwOnChange, this._expr_14, currVal_14)) {
            view.renderer.setElementClass(el, 'md-checkbox-disabled', currVal_14);
            this._expr_14 = currVal_14;
        }
        var currVal_15 = (this.context.align == 'end');
        if (import10.checkBinding(throwOnChange, this._expr_15, currVal_15)) {
            view.renderer.setElementClass(el, 'md-checkbox-align-end', currVal_15);
            this._expr_15 = currVal_15;
        }
        var currVal_16 = this.context.hasFocus;
        if (import10.checkBinding(throwOnChange, this._expr_16, currVal_16)) {
            view.renderer.setElementClass(el, 'md-checkbox-focused', currVal_16);
            this._expr_16 = currVal_16;
        }
    };
    Wrapper_MdCheckbox.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdCheckbox.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view, 'change')));
        }
    };
    return Wrapper_MdCheckbox;
}());
var renderType_MdCheckbox_Host = import10.createRenderComponentType('', 0, import12.ViewEncapsulation.None, [], {});
var View_MdCheckbox_Host0 = (function (_super) {
    __extends(View_MdCheckbox_Host0, _super);
    function View_MdCheckbox_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdCheckbox_Host0, renderType_MdCheckbox_Host, import13.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    Object.defineProperty(View_MdCheckbox_Host0.prototype, "_NG_VALUE_ACCESSOR_0_4", {
        get: function () {
            if ((this.__NG_VALUE_ACCESSOR_0_4 == null)) {
                (this.__NG_VALUE_ACCESSOR_0_4 = [this._MdCheckbox_0_3.context]);
            }
            return this.__NG_VALUE_ACCESSOR_0_4;
        },
        enumerable: true,
        configurable: true
    });
    View_MdCheckbox_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import10.selectOrCreateRenderHostElement(this.renderer, 'md-checkbox', import10.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdCheckbox0(this.viewUtils, this, 0, this._el_0);
        this._MdCheckbox_0_3 = new Wrapper_MdCheckbox(this.renderer, new import15.ElementRef(this._el_0), this.compView_0.ref);
        this.compView_0.create(this._MdCheckbox_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import14.ComponentRef_(0, this, this._el_0, this._MdCheckbox_0_3.context);
    };
    View_MdCheckbox_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCheckbox) && (0 === requestNodeIndex))) {
            return this._MdCheckbox_0_3.context;
        }
        if (((token === import16.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_0_4;
        }
        return notFoundResult;
    };
    View_MdCheckbox_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (this._MdCheckbox_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this._MdCheckbox_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_MdCheckbox_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._MdCheckbox_0_3.ngOnDestroy();
    };
    View_MdCheckbox_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_MdCheckbox_Host0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    };
    return View_MdCheckbox_Host0;
}(import9.AppView));
export var MdCheckboxNgFactory = new import14.ComponentFactory('md-checkbox, mat-checkbox', View_MdCheckbox_Host0, import1.MdCheckbox);
var styles_MdCheckbox = [import17.styles];
var renderType_MdCheckbox = import10.createRenderComponentType('', 1, import12.ViewEncapsulation.None, styles_MdCheckbox, {});
export var View_MdCheckbox0 = (function (_super) {
    __extends(View_MdCheckbox0, _super);
    function View_MdCheckbox0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdCheckbox0, renderType_MdCheckbox, import13.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckOnce);
        this._expr_31 = import8.UNINITIALIZED;
        this._expr_32 = import8.UNINITIALIZED;
        this._expr_33 = import8.UNINITIALIZED;
        this._expr_34 = import8.UNINITIALIZED;
        this._expr_35 = import8.UNINITIALIZED;
        this._expr_36 = import8.UNINITIALIZED;
        this._expr_37 = import8.UNINITIALIZED;
        this._expr_38 = import8.UNINITIALIZED;
        this._expr_39 = import8.UNINITIALIZED;
    }
    View_MdCheckbox0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_input_0 = new import18.QueryList();
        this._el_0 = import10.createRenderElement(this.renderer, parentRenderNode, 'label', new import10.InlineArray2(2, 'class', 'md-checkbox-layout'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_2 = import10.createRenderElement(this.renderer, this._el_0, 'div', new import10.InlineArray2(2, 'class', 'md-checkbox-inner-container'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = import10.createRenderElement(this.renderer, this._el_2, 'input', new import10.InlineArray4(4, 'class', 'md-checkbox-input md-visually-hidden', 'type', 'checkbox'), null);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._anchor_6 = this.renderer.createTemplateAnchor(this._el_2, null);
        this._vc_6 = new import19.ViewContainer(6, 2, this, this._anchor_6);
        this._TemplateRef_6_5 = new import21.TemplateRef_(this, 6, this._anchor_6);
        this._NgIf_6_6 = new import20.Wrapper_NgIf(this._vc_6.vcRef, this._TemplateRef_6_5);
        this._text_7 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_8 = import10.createRenderElement(this.renderer, this._el_2, 'div', new import10.InlineArray2(2, 'class', 'md-checkbox-frame'), null);
        this._text_9 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_10 = import10.createRenderElement(this.renderer, this._el_2, 'div', new import10.InlineArray2(2, 'class', 'md-checkbox-background'), null);
        this._text_11 = this.renderer.createText(this._el_10, '\n      ', null);
        this._el_12 = import10.createRenderElement(this.renderer, this._el_10, ':svg:svg', new import10.InlineArray16(10, ':xml:space', 'preserve', 'class', 'md-checkbox-checkmark', 'version', '1.1', 'viewBox', '0 0 24 24', 'xmlns', 'http://www.w3.org/2000/svg'), null);
        this._text_13 = this.renderer.createText(this._el_12, '\n        ', null);
        this._el_14 = import10.createRenderElement(this.renderer, this._el_12, ':svg:path', new import10.InlineArray8(8, 'class', 'md-checkbox-checkmark-path', 'd', 'M4.1,12.7 9,17.6 20.3,6.3', 'fill', 'none', 'stroke', 'white'), null);
        this._text_15 = this.renderer.createText(this._el_12, '\n      ', null);
        this._text_16 = this.renderer.createText(this._el_10, '\n      ', null);
        this._text_17 = this.renderer.createText(this._el_10, '\n      ', null);
        this._el_18 = import10.createRenderElement(this.renderer, this._el_10, 'div', new import10.InlineArray2(2, 'class', 'md-checkbox-mixedmark'), null);
        this._text_19 = this.renderer.createText(this._el_10, '\n    ', null);
        this._text_20 = this.renderer.createText(this._el_2, '\n  ', null);
        this._text_21 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_22 = import10.createRenderElement(this.renderer, this._el_0, 'span', new import10.InlineArray2(2, 'class', 'md-checkbox-label'), null);
        this._text_23 = this.renderer.createText(this._el_22, '\n    ', null);
        this.projectNodes(this._el_22, 0);
        this._text_24 = this.renderer.createText(this._el_22, '\n  ', null);
        this._text_25 = this.renderer.createText(this._el_0, '\n', null);
        this._text_26 = this.renderer.createText(parentRenderNode, '\n', null);
        var disposable_0 = import10.subscribeToRenderElement(this, this._el_4, new import10.InlineArray8(8, 'focus', null, 'blur', null, 'change', null, 'click', null), this.eventHandler(this.handleEvent_4));
        this._viewQuery_input_0.reset([new import15.ElementRef(this._el_4)]);
        this.context._inputElement = this._viewQuery_input_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._anchor_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._text_17,
            this._el_18,
            this._text_19,
            this._text_20,
            this._text_21,
            this._el_22,
            this._text_23,
            this._text_24,
            this._text_25,
            this._text_26
        ]), [disposable_0]);
        return null;
    };
    View_MdCheckbox0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import21.TemplateRef) && (6 === requestNodeIndex))) {
            return this._TemplateRef_6_5;
        }
        if (((token === import22.NgIf) && (6 === requestNodeIndex))) {
            return this._NgIf_6_6.context;
        }
        return notFoundResult;
    };
    View_MdCheckbox0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_6_0_0 = !this.context._isRippleDisabled();
        this._NgIf_6_6.check_ngIf(currVal_6_0_0, throwOnChange, false);
        this._NgIf_6_6.ngDoCheck(this, this._anchor_6, throwOnChange);
        this._vc_6.detectChangesInNestedViews(throwOnChange);
        var currVal_31 = this.context.inputId;
        if (import10.checkBinding(throwOnChange, this._expr_31, currVal_31)) {
            this.renderer.setElementProperty(this._el_4, 'id', currVal_31);
            this._expr_31 = currVal_31;
        }
        var currVal_32 = this.context.required;
        if (import10.checkBinding(throwOnChange, this._expr_32, currVal_32)) {
            this.renderer.setElementProperty(this._el_4, 'required', currVal_32);
            this._expr_32 = currVal_32;
        }
        var currVal_33 = this.context.checked;
        if (import10.checkBinding(throwOnChange, this._expr_33, currVal_33)) {
            this.renderer.setElementProperty(this._el_4, 'checked', currVal_33);
            this._expr_33 = currVal_33;
        }
        var currVal_34 = this.context.disabled;
        if (import10.checkBinding(throwOnChange, this._expr_34, currVal_34)) {
            this.renderer.setElementProperty(this._el_4, 'disabled', currVal_34);
            this._expr_34 = currVal_34;
        }
        var currVal_35 = this.context.name;
        if (import10.checkBinding(throwOnChange, this._expr_35, currVal_35)) {
            this.renderer.setElementProperty(this._el_4, 'name', currVal_35);
            this._expr_35 = currVal_35;
        }
        var currVal_36 = this.context.tabindex;
        if (import10.checkBinding(throwOnChange, this._expr_36, currVal_36)) {
            this.renderer.setElementProperty(this._el_4, 'tabIndex', currVal_36);
            this._expr_36 = currVal_36;
        }
        var currVal_37 = this.context.indeterminate;
        if (import10.checkBinding(throwOnChange, this._expr_37, currVal_37)) {
            this.renderer.setElementProperty(this._el_4, 'indeterminate', currVal_37);
            this._expr_37 = currVal_37;
        }
        var currVal_38 = this.context.ariaLabel;
        if (import10.checkBinding(throwOnChange, this._expr_38, currVal_38)) {
            this.renderer.setElementAttribute(this._el_4, 'aria-label', ((currVal_38 == null) ? null : currVal_38.toString()));
            this._expr_38 = currVal_38;
        }
        var currVal_39 = this.context.ariaLabelledby;
        if (import10.checkBinding(throwOnChange, this._expr_39, currVal_39)) {
            this.renderer.setElementAttribute(this._el_4, 'aria-labelledby', ((currVal_39 == null) ? null : currVal_39.toString()));
            this._expr_39 = currVal_39;
        }
    };
    View_MdCheckbox0.prototype.destroyInternal = function () {
        this._vc_6.destroyNestedViews();
    };
    View_MdCheckbox0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 6)) {
            return new View_MdCheckbox1(this.viewUtils, this, 6, this._anchor_6, this._vc_6);
        }
        return null;
    };
    View_MdCheckbox0.prototype.handleEvent_4 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'focus')) {
            var pd_sub_0 = (this.context._onInputFocus() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'blur')) {
            var pd_sub_1 = (this.context._onInputBlur() !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'change')) {
            var pd_sub_2 = (this.context._onInteractionEvent($event) !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'click')) {
            var pd_sub_3 = (this.context._onInputClick($event) !== false);
            result = (pd_sub_3 && result);
        }
        return result;
    };
    return View_MdCheckbox0;
}(import9.AppView));
var View_MdCheckbox1 = (function (_super) {
    __extends(View_MdCheckbox1, _super);
    function View_MdCheckbox1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_MdCheckbox1, renderType_MdCheckbox, import13.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_MdCheckbox1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import10.createRenderElement(this.renderer, null, 'div', new import10.InlineArray8(6, 'class', 'md-checkbox-ripple', 'md-ripple', '', 'md-ripple-background-color', 'rgba(0, 0, 0, 0)'), null);
        this._MdRipple_0_3 = new import23.Wrapper_MdRipple(new import15.ElementRef(this._el_0), this.parentView.parentView.injectorGet(import24.NgZone, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import25.ViewportRuler, this.parentView.parentIndex));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return null;
    };
    View_MdCheckbox1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import4.MdRipple) && (0 === requestNodeIndex))) {
            return this._MdRipple_0_3.context;
        }
        return notFoundResult;
    };
    View_MdCheckbox1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.parentView.context.getHostElement();
        this._MdRipple_0_3.check_trigger(currVal_0_0_0, throwOnChange, false);
        var currVal_0_0_1 = true;
        this._MdRipple_0_3.check_centered(currVal_0_0_1, throwOnChange, false);
        var currVal_0_0_2 = 0.3;
        this._MdRipple_0_3.check_speedFactor(currVal_0_0_2, throwOnChange, false);
        var currVal_0_0_3 = 'rgba(0, 0, 0, 0)';
        this._MdRipple_0_3.check_backgroundColor(currVal_0_0_3, throwOnChange, false);
        this._MdRipple_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._MdRipple_0_3.checkHost(this, this, this._el_0, throwOnChange);
    };
    View_MdCheckbox1.prototype.destroyInternal = function () {
        this._MdRipple_0_3.ngOnDestroy();
    };
    View_MdCheckbox1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_MdCheckbox1;
}(import9.AppView));
//# sourceMappingURL=checkbox.ngfactory.js.map