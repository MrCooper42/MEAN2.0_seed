/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/card/card';
import * as import2 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/metadata/view';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/core/src/change_detection/change_detection';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './card.css';
class MdCardModuleInjector extends import0.NgModuleInjector {
    constructor(parent) {
        super(parent, [], []);
    }
    get _MATERIAL_COMPATIBILITY_MODE_2() {
        if ((this.__MATERIAL_COMPATIBILITY_MODE_2 == null)) {
            (this.__MATERIAL_COMPATIBILITY_MODE_2 = false);
        }
        return this.__MATERIAL_COMPATIBILITY_MODE_2;
    }
    createInternal() {
        this._DefaultStyleCompatibilityModeModule_0 = new import2.DefaultStyleCompatibilityModeModule();
        this._MdCardModule_1 = new import1.MdCardModule();
        return this._MdCardModule_1;
    }
    getInternal(token, notFoundResult) {
        if ((token === import2.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_0;
        }
        if ((token === import1.MdCardModule)) {
            return this._MdCardModule_1;
        }
        if ((token === import2.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_2;
        }
        return notFoundResult;
    }
    destroyInternal() {
    }
}
export const MdCardModuleNgFactory = new import0.NgModuleFactory(MdCardModuleInjector, import1.MdCardModule);
export class Wrapper_MdCard {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCard();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdCardHeader {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCardHeader();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdCardTitleGroup {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCardTitleGroup();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdCardContent {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCardContent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdCardTitle {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCardTitle();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdCardSubtitle {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCardSubtitle();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdCardActions {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCardActions();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdCardFooter {
    constructor() {
        this._changed = false;
        this.context = new import1.MdCardFooter();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_MdCard_Host = import6.createRenderComponentType('', 0, import7.ViewEncapsulation.None, [], {});
class View_MdCard_Host0 extends import4.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdCard_Host0, renderType_MdCard_Host, import8.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer, 'md-card', import6.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdCard0(this.viewUtils, this, 0, this._el_0);
        this._MdCard_0_3 = new Wrapper_MdCard();
        this.compView_0.create(this._MdCard_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import10.ComponentRef_(0, this, this._el_0, this._MdCard_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCard) && (0 === requestNodeIndex))) {
            return this._MdCard_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._MdCard_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    }
}
export const MdCardNgFactory = new import10.ComponentFactory('md-card, mat-card', View_MdCard_Host0, import1.MdCard);
const styles_MdCard = [import11.styles];
var renderType_MdCard = import6.createRenderComponentType('', 1, import7.ViewEncapsulation.None, styles_MdCard, {});
export class View_MdCard0 extends import4.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdCard0, renderType_MdCard, import8.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckOnce);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.projectNodes(parentRenderNode, 0);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [this._text_0]), null);
        return null;
    }
}
var renderType_MdCardHeader_Host = import6.createRenderComponentType('', 0, import7.ViewEncapsulation.None, [], {});
class View_MdCardHeader_Host0 extends import4.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdCardHeader_Host0, renderType_MdCardHeader_Host, import8.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer, 'md-card-header', import6.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdCardHeader0(this.viewUtils, this, 0, this._el_0);
        this._MdCardHeader_0_3 = new Wrapper_MdCardHeader();
        this.compView_0.create(this._MdCardHeader_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import10.ComponentRef_(0, this, this._el_0, this._MdCardHeader_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCardHeader) && (0 === requestNodeIndex))) {
            return this._MdCardHeader_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._MdCardHeader_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 1))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 2))) { }
    }
}
export const MdCardHeaderNgFactory = new import10.ComponentFactory('md-card-header, mat-card-header', View_MdCardHeader_Host0, import1.MdCardHeader);
const styles_MdCardHeader = [];
var renderType_MdCardHeader = import6.createRenderComponentType('', 3, import7.ViewEncapsulation.None, styles_MdCardHeader, {});
export class View_MdCardHeader0 extends import4.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdCardHeader0, renderType_MdCardHeader, import8.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckOnce);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.projectNodes(parentRenderNode, 0);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_1 = import6.createRenderElement(this.renderer, parentRenderNode, 'div', new import6.InlineArray2(2, 'class', 'md-card-header-text'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n  ', null);
        this.projectNodes(this._el_1, 1);
        this._text_3 = this.renderer.createText(this._el_1, '\n', null);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this.projectNodes(parentRenderNode, 2);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._text_3,
            this._text_4,
            this._text_5
        ]), null);
        return null;
    }
}
var renderType_MdCardTitleGroup_Host = import6.createRenderComponentType('', 0, import7.ViewEncapsulation.None, [], {});
class View_MdCardTitleGroup_Host0 extends import4.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdCardTitleGroup_Host0, renderType_MdCardTitleGroup_Host, import8.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer, 'md-card-title-group', import6.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdCardTitleGroup0(this.viewUtils, this, 0, this._el_0);
        this._MdCardTitleGroup_0_3 = new Wrapper_MdCardTitleGroup();
        this.compView_0.create(this._MdCardTitleGroup_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import10.ComponentRef_(0, this, this._el_0, this._MdCardTitleGroup_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCardTitleGroup) && (0 === requestNodeIndex))) {
            return this._MdCardTitleGroup_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._MdCardTitleGroup_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 1))) { }
        if (((nodeIndex == 0) && (ngContentIndex == 2))) { }
    }
}
export const MdCardTitleGroupNgFactory = new import10.ComponentFactory('md-card-title-group, mat-card-title-group', View_MdCardTitleGroup_Host0, import1.MdCardTitleGroup);
const styles_MdCardTitleGroup = [];
var renderType_MdCardTitleGroup = import6.createRenderComponentType('', 3, import7.ViewEncapsulation.None, styles_MdCardTitleGroup, {});
export class View_MdCardTitleGroup0 extends import4.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdCardTitleGroup0, renderType_MdCardTitleGroup, import8.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckOnce);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import6.createRenderElement(this.renderer, parentRenderNode, 'div', import6.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this.projectNodes(this._el_0, 0);
        this._text_2 = this.renderer.createText(this._el_0, '\n', null);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n', null);
        this.projectNodes(parentRenderNode, 1);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this.projectNodes(parentRenderNode, 2);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._text_2,
            this._text_3,
            this._text_4,
            this._text_5
        ]), null);
        return null;
    }
}
//# sourceMappingURL=card.ngfactory.js.map