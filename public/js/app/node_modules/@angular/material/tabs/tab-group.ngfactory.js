/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/tabs/tab-group';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/portal/portal-directives';
import * as import4 from '@angular/material/core/compatibility/default-mode';
import * as import5 from '@angular/material/core/ripple/ripple';
import * as import6 from '@angular/common/src/localization';
import * as import8 from '@angular/core/src/i18n/tokens';
import * as import9 from '@angular/core/src/change_detection/change_detection';
import * as import10 from '@angular/core/src/linker/view';
import * as import11 from '@angular/core/src/linker/view_utils';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/query_list';
import * as import15 from '@angular/core/src/linker/view_type';
import * as import16 from '@angular/core/src/linker/component_factory';
import * as import17 from './tab-group.css.shim';
import * as import18 from '@angular/material/tabs/tab-header';
import * as import19 from './tab-header.ngfactory';
import * as import20 from '@angular/core/src/linker/view_container';
import * as import21 from '../../common/src/directives/ng_for.ngfactory';
import * as import22 from '@angular/core/src/zone/ng_zone';
import * as import23 from '@angular/core/src/linker/element_ref';
import * as import24 from '@angular/material/core/rtl/dir';
import * as import25 from '@angular/core/src/linker/template_ref';
import * as import26 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import27 from '@angular/common/src/directives/ng_for';
import * as import28 from '../core/ripple/ripple.ngfactory';
import * as import29 from './tab-label-wrapper.ngfactory';
import * as import30 from '../../common/src/directives/ng_if.ngfactory';
import * as import31 from '@angular/material/core/overlay/position/viewport-ruler';
import * as import32 from '@angular/common/src/directives/ng_if';
import * as import33 from '@angular/material/tabs/tab-label-wrapper';
import * as import34 from '../core/portal/portal-directives.ngfactory';
import * as import35 from '@angular/core/src/linker/component_factory_resolver';
import * as import36 from '@angular/material/tabs/tab-body';
import * as import37 from './tab-body.ngfactory';
class MdTabsModuleInjector extends import0.NgModuleInjector {
    constructor(parent) {
        super(parent, [], []);
    }
    get _NgLocalization_5() {
        if ((this.__NgLocalization_5 == null)) {
            (this.__NgLocalization_5 = new import6.NgLocaleLocalization(this.parent.get(import8.LOCALE_ID)));
        }
        return this.__NgLocalization_5;
    }
    get _MATERIAL_COMPATIBILITY_MODE_6() {
        if ((this.__MATERIAL_COMPATIBILITY_MODE_6 == null)) {
            (this.__MATERIAL_COMPATIBILITY_MODE_6 = false);
        }
        return this.__MATERIAL_COMPATIBILITY_MODE_6;
    }
    createInternal() {
        this._CommonModule_0 = new import2.CommonModule();
        this._PortalModule_1 = new import3.PortalModule();
        this._DefaultStyleCompatibilityModeModule_2 = new import4.DefaultStyleCompatibilityModeModule();
        this._MdRippleModule_3 = new import5.MdRippleModule();
        this._MdTabsModule_4 = new import1.MdTabsModule();
        return this._MdTabsModule_4;
    }
    getInternal(token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.PortalModule)) {
            return this._PortalModule_1;
        }
        if ((token === import4.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_2;
        }
        if ((token === import5.MdRippleModule)) {
            return this._MdRippleModule_3;
        }
        if ((token === import1.MdTabsModule)) {
            return this._MdTabsModule_4;
        }
        if ((token === import6.NgLocalization)) {
            return this._NgLocalization_5;
        }
        if ((token === import4.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_6;
        }
        return notFoundResult;
    }
    destroyInternal() {
    }
}
export const MdTabsModuleNgFactory = new import0.NgModuleFactory(MdTabsModuleInjector, import1.MdTabsModule);
export class Wrapper_MdTabGroup {
    constructor(p0) {
        this._changed = false;
        this.context = new import1.MdTabGroup(p0);
        this._expr_0 = import9.UNINITIALIZED;
        this._expr_1 = import9.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
    }
    check_dynamicHeight(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import11.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.dynamicHeight = currValue;
            this._expr_0 = currValue;
        }
    }
    check_selectedIndex(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import11.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.selectedIndex = currValue;
            this._expr_1 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1, emit2) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.selectedIndexChange.subscribe(_eventHandler.bind(view, 'selectedIndexChange')));
        }
        if (emit1) {
            (this.subscription1 = this.context.focusChange.subscribe(_eventHandler.bind(view, 'focusChange')));
        }
        if (emit2) {
            (this.subscription2 = this.context.selectChange.subscribe(_eventHandler.bind(view, 'selectChange')));
        }
    }
}
var renderType_MdTabGroup_Host = import11.createRenderComponentType('', 0, import13.ViewEncapsulation.None, [], {});
class View_MdTabGroup_Host0 extends import10.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdTabGroup_Host0, renderType_MdTabGroup_Host, import15.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import11.selectOrCreateRenderHostElement(this.renderer, 'md-tab-group', import11.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdTabGroup0(this.viewUtils, this, 0, this._el_0);
        this._MdTabGroup_0_3 = new Wrapper_MdTabGroup(this.renderer);
        this._query_MdTab_0_0 = new import14.QueryList();
        this.compView_0.create(this._MdTabGroup_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import16.ComponentRef_(0, this, this._el_0, this._MdTabGroup_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdTabGroup) && (0 === requestNodeIndex))) {
            return this._MdTabGroup_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdTabGroup_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdTab_0_0.dirty) {
                this._query_MdTab_0_0.reset([]);
                this._MdTabGroup_0_3.context._tabs = this._query_MdTab_0_0;
                this._query_MdTab_0_0.notifyOnChanges();
            }
            this._MdTabGroup_0_3.context.ngAfterContentChecked();
        }
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            this._MdTabGroup_0_3.context.ngAfterViewChecked();
        }
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._MdTabGroup_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
export const MdTabGroupNgFactory = new import16.ComponentFactory('md-tab-group', View_MdTabGroup_Host0, import1.MdTabGroup);
const styles_MdTabGroup = [import17.styles];
var renderType_MdTabGroup = import11.createRenderComponentType('', 0, import13.ViewEncapsulation.Emulated, styles_MdTabGroup, {});
export class View_MdTabGroup0 extends import10.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdTabGroup0, renderType_MdTabGroup, import15.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_tabBodyWrapper_0 = new import14.QueryList();
        this._el_0 = import11.createRenderElement(this.renderer, parentRenderNode, 'md-tab-header', new import11.InlineArray2(2, 'class', 'md-tab-header'), null);
        this.compView_0 = new import19.View_MdTabHeader0(this.viewUtils, this, 0, this._el_0);
        this._MdTabHeader_0_3 = new import19.Wrapper_MdTabHeader(this.parentView.injectorGet(import22.NgZone, this.parentIndex), new import23.ElementRef(this._el_0), this.parentView.injectorGet(import24.Dir, this.parentIndex, null));
        this._query_MdTabLabelWrapper_0_0 = new import14.QueryList();
        this._text_1 = this.renderer.createText(null, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(null, null);
        this._vc_2 = new import20.ViewContainer(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import25.TemplateRef_(this, 2, this._anchor_2);
        this._NgFor_2_6 = new import21.Wrapper_NgFor(this._vc_2.vcRef, this._TemplateRef_2_5, this.parentView.injectorGet(import26.IterableDiffers, this.parentIndex), this.ref);
        this._text_3 = this.renderer.createText(null, '\n', null);
        this.compView_0.create(this._MdTabHeader_0_3.context);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_5 = import11.createRenderElement(this.renderer, parentRenderNode, 'div', new import11.InlineArray2(2, 'class', 'md-tab-body-wrapper'), null);
        this._text_6 = this.renderer.createText(this._el_5, '\n  ', null);
        this._anchor_7 = this.renderer.createTemplateAnchor(this._el_5, null);
        this._vc_7 = new import20.ViewContainer(7, 5, this, this._anchor_7);
        this._TemplateRef_7_5 = new import25.TemplateRef_(this, 7, this._anchor_7);
        this._NgFor_7_6 = new import21.Wrapper_NgFor(this._vc_7.vcRef, this._TemplateRef_7_5, this.parentView.injectorGet(import26.IterableDiffers, this.parentIndex), this.ref);
        this._text_8 = this.renderer.createText(this._el_5, '\n', null);
        this._text_9 = this.renderer.createText(parentRenderNode, '\n', null);
        var disposable_0 = import11.subscribeToRenderElement(this, this._el_0, new import11.InlineArray4(4, 'indexFocused', null, 'selectFocusedIndex', null), this.eventHandler(this.handleEvent_0));
        this._MdTabHeader_0_3.subscribe(this, this.eventHandler(this.handleEvent_0), true, true);
        this._viewQuery_tabBodyWrapper_0.reset([new import23.ElementRef(this._el_5)]);
        this.context._tabBodyWrapper = this._viewQuery_tabBodyWrapper_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._text_4,
            this._el_5,
            this._text_6,
            this._anchor_7,
            this._text_8,
            this._text_9
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import25.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import27.NgFor) && (2 === requestNodeIndex))) {
            return this._NgFor_2_6.context;
        }
        if (((token === import18.MdTabHeader) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._MdTabHeader_0_3.context;
        }
        if (((token === import25.TemplateRef) && (7 === requestNodeIndex))) {
            return this._TemplateRef_7_5;
        }
        if (((token === import27.NgFor) && (7 === requestNodeIndex))) {
            return this._NgFor_7_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = this.context.selectedIndex;
        this._MdTabHeader_0_3.check_selectedIndex(currVal_0_0_0, throwOnChange, false);
        this._MdTabHeader_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_2_0_0 = this.context._tabs;
        this._NgFor_2_6.check_ngForOf(currVal_2_0_0, throwOnChange, false);
        this._NgFor_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        const currVal_7_0_0 = this.context._tabs;
        this._NgFor_7_6.check_ngForOf(currVal_7_0_0, throwOnChange, false);
        this._NgFor_7_6.ngDoCheck(this, this._anchor_7, throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
        this._vc_7.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdTabLabelWrapper_0_0.dirty) {
                this._query_MdTabLabelWrapper_0_0.reset([this._vc_2.mapNestedViews(View_MdTabGroup1, (nestedView) => {
                        return [nestedView._MdTabLabelWrapper_0_4.context];
                    })]);
                this._MdTabHeader_0_3.context._labelWrappers = this._query_MdTabLabelWrapper_0_0;
                this._query_MdTabLabelWrapper_0_0.notifyOnChanges();
            }
            this._MdTabHeader_0_3.context.ngAfterContentChecked();
        }
        this._MdTabHeader_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            this._MdTabHeader_0_3.context.ngAfterViewChecked();
        }
    }
    destroyInternal() {
        this._vc_2.destroyNestedViews();
        this._vc_7.destroyNestedViews();
        this.compView_0.destroy();
        this._MdTabHeader_0_3.ngOnDestroy();
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) {
            cb(this._text_1, ctx);
            cb(this._vc_2.nativeElement, ctx);
            this._vc_2.visitNestedViewRootNodes(cb, ctx);
            cb(this._text_3, ctx);
        }
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 2)) {
            return new View_MdTabGroup1(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        if ((nodeIndex == 7)) {
            return new View_MdTabGroup5(this.viewUtils, this, 7, this._anchor_7, this._vc_7);
        }
        return null;
    }
    handleEvent_0(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'indexFocused')) {
            const pd_sub_0 = (this.context._focusChanged($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'selectFocusedIndex')) {
            const pd_sub_1 = ((this.context.selectedIndex = $event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    }
}
class View_MdTabGroup1 extends import10.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdTabGroup1, renderType_MdTabGroup, import15.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_16 = import9.UNINITIALIZED;
        this._expr_17 = import9.UNINITIALIZED;
        this._expr_18 = import9.UNINITIALIZED;
        this._expr_19 = import9.UNINITIALIZED;
        this._expr_20 = import9.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = import11.createRenderElement(this.renderer, null, 'div', new import11.InlineArray8(8, 'class', 'md-tab-label', 'md-ripple', '', 'md-tab-label-wrapper', '', 'role', 'tab'), null);
        this._MdRipple_0_3 = new import28.Wrapper_MdRipple(new import23.ElementRef(this._el_0), this.parentView.parentView.injectorGet(import22.NgZone, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import31.ViewportRuler, this.parentView.parentIndex));
        this._MdTabLabelWrapper_0_4 = new import29.Wrapper_MdTabLabelWrapper(new import23.ElementRef(this._el_0), this.renderer);
        this._text_1 = this.renderer.createText(this._el_0, '\n\n    ', null);
        this._text_2 = this.renderer.createText(this._el_0, '\n    ', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._vc_3 = new import20.ViewContainer(3, 0, this, this._anchor_3);
        this._TemplateRef_3_5 = new import25.TemplateRef_(this, 3, this._anchor_3);
        this._NgIf_3_6 = new import30.Wrapper_NgIf(this._vc_3.vcRef, this._TemplateRef_3_5);
        this._text_4 = this.renderer.createText(this._el_0, '\n\n    ', null);
        this._text_5 = this.renderer.createText(this._el_0, '\n    ', null);
        this._anchor_6 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._vc_6 = new import20.ViewContainer(6, 0, this, this._anchor_6);
        this._TemplateRef_6_5 = new import25.TemplateRef_(this, 6, this._anchor_6);
        this._NgIf_6_6 = new import30.Wrapper_NgIf(this._vc_6.vcRef, this._TemplateRef_6_5);
        this._text_7 = this.renderer.createText(this._el_0, '\n  ', null);
        var disposable_0 = import11.subscribeToRenderElement(this, this._el_0, new import11.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._text_2,
            this._anchor_3,
            this._text_4,
            this._text_5,
            this._anchor_6,
            this._text_7
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import25.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import32.NgIf) && (3 === requestNodeIndex))) {
            return this._NgIf_3_6.context;
        }
        if (((token === import25.TemplateRef) && (6 === requestNodeIndex))) {
            return this._TemplateRef_6_5;
        }
        if (((token === import32.NgIf) && (6 === requestNodeIndex))) {
            return this._NgIf_6_6.context;
        }
        if (((token === import5.MdRipple) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 7)))) {
            return this._MdRipple_0_3.context;
        }
        if (((token === import33.MdTabLabelWrapper) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 7)))) {
            return this._MdTabLabelWrapper_0_4.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdRipple_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_0_1_0 = this.context.$implicit.disabled;
        this._MdTabLabelWrapper_0_4.check_disabled(currVal_0_1_0, throwOnChange, false);
        this._MdTabLabelWrapper_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_3_0_0 = this.context.$implicit.templateLabel;
        this._NgIf_3_6.check_ngIf(currVal_3_0_0, throwOnChange, false);
        this._NgIf_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        const currVal_6_0_0 = !this.context.$implicit.templateLabel;
        this._NgIf_6_6.check_ngIf(currVal_6_0_0, throwOnChange, false);
        this._NgIf_6_6.ngDoCheck(this, this._anchor_6, throwOnChange);
        this._vc_3.detectChangesInNestedViews(throwOnChange);
        this._vc_6.detectChangesInNestedViews(throwOnChange);
        const currVal_16 = this.parentView.context._getTabLabelId(this.context.index);
        if (import11.checkBinding(throwOnChange, this._expr_16, currVal_16)) {
            this.renderer.setElementProperty(this._el_0, 'id', currVal_16);
            this._expr_16 = currVal_16;
        }
        const currVal_17 = ((this.parentView.context.selectedIndex == this.context.index) ? 0 : (0 - 1));
        if (import11.checkBinding(throwOnChange, this._expr_17, currVal_17)) {
            this.renderer.setElementProperty(this._el_0, 'tabIndex', currVal_17);
            this._expr_17 = currVal_17;
        }
        const currVal_18 = this.parentView.context._getTabContentId(this.context.index);
        if (import11.checkBinding(throwOnChange, this._expr_18, currVal_18)) {
            this.renderer.setElementAttribute(this._el_0, 'aria-controls', ((currVal_18 == null) ? null : currVal_18.toString()));
            this._expr_18 = currVal_18;
        }
        const currVal_19 = (this.parentView.context.selectedIndex == this.context.index);
        if (import11.checkBinding(throwOnChange, this._expr_19, currVal_19)) {
            this.renderer.setElementAttribute(this._el_0, 'aria-selected', ((currVal_19 == null) ? null : currVal_19.toString()));
            this._expr_19 = currVal_19;
        }
        const currVal_20 = (this.parentView.context.selectedIndex == this.context.index);
        if (import11.checkBinding(throwOnChange, this._expr_20, currVal_20)) {
            this.renderer.setElementClass(this._el_0, 'md-tab-label-active', currVal_20);
            this._expr_20 = currVal_20;
        }
        this._MdRipple_0_3.checkHost(this, this, this._el_0, throwOnChange);
        this._MdTabLabelWrapper_0_4.checkHost(this, this, this._el_0, throwOnChange);
    }
    dirtyParentQueriesInternal() {
        this.parentView._query_MdTabLabelWrapper_0_0.setDirty();
    }
    destroyInternal() {
        this._vc_3.destroyNestedViews();
        this._vc_6.destroyNestedViews();
        this._MdRipple_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 3)) {
            return new View_MdTabGroup2(this.viewUtils, this, 3, this._anchor_3, this._vc_3);
        }
        if ((nodeIndex == 6)) {
            return new View_MdTabGroup4(this.viewUtils, this, 6, this._anchor_6, this._vc_6);
        }
        return null;
    }
    handleEvent_0(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = ((this.parentView._MdTabHeader_0_3.context.focusIndex = (this.parentView.context.selectedIndex = this.context.index)) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}
class View_MdTabGroup2 extends import10.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdTabGroup2, renderType_MdTabGroup, import15.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._text_0 = this.renderer.createText(null, '\n      ', null);
        this._anchor_1 = this.renderer.createTemplateAnchor(null, null);
        this._vc_1 = new import20.ViewContainer(1, null, this, this._anchor_1);
        this._TemplateRef_1_5 = new import25.TemplateRef_(this, 1, this._anchor_1);
        this._PortalHostDirective_1_6 = new import34.Wrapper_PortalHostDirective(this.parentView.parentView.parentView.injectorGet(import35.ComponentFactoryResolver, this.parentView.parentView.parentIndex), this._vc_1.vcRef);
        this._text_2 = this.renderer.createText(null, '\n    ', null);
        this.init(this._text_2, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._anchor_1,
            this._text_2
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import25.TemplateRef) && (1 === requestNodeIndex))) {
            return this._TemplateRef_1_5;
        }
        if (((token === import3.PortalHostDirective) && (1 === requestNodeIndex))) {
            return this._PortalHostDirective_1_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_1_0_0 = this.parentView.context.$implicit.templateLabel;
        this._PortalHostDirective_1_6.check_portal(currVal_1_0_0, throwOnChange, false);
        this._PortalHostDirective_1_6.ngDoCheck(this, this._anchor_1, throwOnChange);
        this._vc_1.detectChangesInNestedViews(throwOnChange);
    }
    destroyInternal() {
        this._vc_1.destroyNestedViews();
        this._PortalHostDirective_1_6.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._text_0, ctx);
        cb(this._vc_1.nativeElement, ctx);
        this._vc_1.visitNestedViewRootNodes(cb, ctx);
        cb(this._text_2, ctx);
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 1)) {
            return new View_MdTabGroup3(this.viewUtils, this, 1, this._anchor_1, this._vc_1);
        }
        return null;
    }
}
class View_MdTabGroup3 extends import10.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdTabGroup3, renderType_MdTabGroup, import15.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._el_0 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : []), null);
        return null;
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
class View_MdTabGroup4 extends import10.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdTabGroup4, renderType_MdTabGroup, import15.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_1 = import9.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._text_0 = this.renderer.createText(null, '', null);
        this.init(this._text_0, (this.renderer.directRenderer ? null : [this._text_0]), null);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_1 = import11.inlineInterpolate(1, '', this.parentView.context.$implicit.textLabel, '');
        if (import11.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setText(this._text_0, currVal_1);
            this._expr_1 = currVal_1;
        }
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._text_0, ctx);
    }
}
class View_MdTabGroup5 extends import10.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdTabGroup5, renderType_MdTabGroup, import15.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_4 = import9.UNINITIALIZED;
        this._expr_5 = import9.UNINITIALIZED;
        this._expr_6 = import9.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = import11.createRenderElement(this.renderer, null, 'md-tab-body', new import11.InlineArray2(2, 'role', 'tabpanel'), null);
        this.compView_0 = new import37.View_MdTabBody0(this.viewUtils, this, 0, this._el_0);
        this._MdTabBody_0_3 = new import37.Wrapper_MdTabBody(new import23.ElementRef(this._el_0), this.parentView.parentView.injectorGet(import24.Dir, this.parentView.parentIndex, null));
        this._text_1 = this.renderer.createText(null, '\n  ', null);
        this.compView_0.create(this._MdTabBody_0_3.context);
        var disposable_0 = import11.subscribeToRenderElement(this, this._el_0, new import11.InlineArray4(4, 'onCentered', null, 'onCentering', null), this.eventHandler(this.handleEvent_0));
        this._MdTabBody_0_3.subscribe(this, this.eventHandler(this.handleEvent_0), true, true);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import36.MdTabBody) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) {
            return this._MdTabBody_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = this.context.$implicit.content;
        this._MdTabBody_0_3.check__content(currVal_0_0_0, throwOnChange, false);
        const currVal_0_0_1 = this.context.$implicit.position;
        this._MdTabBody_0_3.check_position(currVal_0_0_1, throwOnChange, false);
        const currVal_0_0_2 = this.context.$implicit.origin;
        this._MdTabBody_0_3.check_origin(currVal_0_0_2, throwOnChange, false);
        this._MdTabBody_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_4 = this.parentView.context._getTabContentId(this.context.index);
        if (import11.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementProperty(this._el_0, 'id', currVal_4);
            this._expr_4 = currVal_4;
        }
        const currVal_5 = this.parentView.context._getTabLabelId(this.context.index);
        if (import11.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementAttribute(this._el_0, 'aria-labelledby', ((currVal_5 == null) ? null : currVal_5.toString()));
            this._expr_5 = currVal_5;
        }
        const currVal_6 = (this.parentView.context.selectedIndex == this.context.index);
        if (import11.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_0, 'md-tab-body-active', currVal_6);
            this._expr_6 = currVal_6;
        }
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            this._MdTabBody_0_3.context.ngAfterViewChecked();
        }
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._MdTabBody_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    handleEvent_0(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'onCentered')) {
            const pd_sub_0 = (this.parentView.context._removeTabBodyWrapperHeight() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'onCentering')) {
            const pd_sub_1 = (this.parentView.context._setTabBodyWrapperHeight($event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    }
}
//# sourceMappingURL=tab-group.ngfactory.js.map