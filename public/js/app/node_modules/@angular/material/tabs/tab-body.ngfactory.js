/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/material/tabs/tab-body';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/material/core/rtl/dir';
import * as import10 from '@angular/core/src/animation/animation_transition';
import * as import11 from '@angular/core/src/animation/animation_sequence_player';
import * as import12 from '@angular/core/src/animation/animation_styles';
import * as import13 from '@angular/core/src/animation/animation_style_util';
import * as import14 from '@angular/core/src/animation/animation_keyframe';
import * as import15 from '@angular/core/src/animation/animation_player';
import * as import16 from '@angular/core/src/linker/query_list';
import * as import17 from '@angular/core/src/linker/view_container';
import * as import18 from '../core/portal/portal-directives.ngfactory';
import * as import19 from '@angular/core/src/linker/template_ref';
import * as import20 from '@angular/core/src/linker/component_factory_resolver';
import * as import21 from '@angular/material/core/portal/portal-directives';
export class Wrapper_MdTabBody {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import0.MdTabBody(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
    }
    check__content(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context._content = currValue;
            this._expr_0 = currValue;
        }
    }
    check_position(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.position = currValue;
            this._expr_1 = currValue;
        }
    }
    check_origin(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.origin = currValue;
            this._expr_2 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onCentering.subscribe(_eventHandler.bind(view, 'onCentering')));
        }
        if (emit1) {
            (this.subscription1 = this.context.onCentered.subscribe(_eventHandler.bind(view, 'onCentered')));
        }
    }
}
var renderType_MdTabBody_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_MdTabBody_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdTabBody_Host0, renderType_MdTabBody_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'md-tab-body', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MdTabBody0(this.viewUtils, this, 0, this._el_0);
        this._MdTabBody_0_3 = new Wrapper_MdTabBody(new import8.ElementRef(this._el_0), this.injectorGet(import9.Dir, this.parentIndex, null));
        this.compView_0.create(this._MdTabBody_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._MdTabBody_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.MdTabBody) && (0 === requestNodeIndex))) {
            return this._MdTabBody_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdTabBody_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            this._MdTabBody_0_3.context.ngAfterViewChecked();
        }
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._MdTabBody_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
export const MdTabBodyNgFactory = new import7.ComponentFactory('md-tab-body', View_MdTabBody_Host0, import0.MdTabBody);
const styles_MdTabBody = [];
var MdTabBody_translateTab_states = {
    left: { transform: 'translate3d(-100%, 0, 0)' },
    'left-origin-center': { transform: 'translate3d(0, 0, 0)' },
    'right-origin-center': { transform: 'translate3d(0, 0, 0)' },
    center: { transform: 'translate3d(0, 0, 0)' },
    right: { transform: 'translate3d(100%, 0, 0)' },
    '*': {},
    void: {}
};
function MdTabBody_translateTab_factory(view, element, currentState, nextState) {
    var previousPlayers = view.animationContext.getAnimationPlayers(element, 'translateTab', (nextState == 'void'));
    var collectedStyles = {};
    var player = null;
    var totalTime = 0;
    var defaultStateStyles = MdTabBody_translateTab_states['*'];
    var startStateStyles = MdTabBody_translateTab_states[currentState];
    if ((startStateStyles == null)) {
        (startStateStyles = defaultStateStyles);
    }
    var endStateStyles = MdTabBody_translateTab_states[nextState];
    if ((endStateStyles == null)) {
        (endStateStyles = defaultStateStyles);
    }
    if (((player == null) && ((((true && (nextState == 'left')) || (true && (nextState == 'right'))) || ((currentState == 'left') && (nextState == 'center'))) || ((currentState == 'right') && (nextState == 'center'))))) {
        player = new import11.AnimationSequencePlayer([view.renderer.animate(element, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [startStateStyles])), import13.balanceAnimationKeyframes(collectedStyles, endStateStyles, [
                new import14.AnimationKeyframe(0, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}]))),
                new import14.AnimationKeyframe(1, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}])))
            ]), 500, 0, 'cubic-bezier(0.35, 0, 0.25, 1)', previousPlayers)]);
        totalTime = 500;
    }
    if (((player == null) && ((currentState == 'void') && (nextState == 'left-origin-center')))) {
        player = new import11.AnimationSequencePlayer([view.renderer.animate(element, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [
                startStateStyles,
                { transform: 'translate3d(-100%, 0, 0)' }
            ])), import13.balanceAnimationKeyframes(collectedStyles, endStateStyles, [
                new import14.AnimationKeyframe(0, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}]))),
                new import14.AnimationKeyframe(1, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}])))
            ]), 500, 0, 'cubic-bezier(0.35, 0, 0.25, 1)', previousPlayers)]);
        totalTime = 500;
    }
    if (((player == null) && ((currentState == 'void') && (nextState == 'right-origin-center')))) {
        player = new import11.AnimationSequencePlayer([view.renderer.animate(element, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [
                startStateStyles,
                { transform: 'translate3d(100%, 0, 0)' }
            ])), import13.balanceAnimationKeyframes(collectedStyles, endStateStyles, [
                new import14.AnimationKeyframe(0, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}]))),
                new import14.AnimationKeyframe(1, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}])))
            ]), 500, 0, 'cubic-bezier(0.35, 0, 0.25, 1)', previousPlayers)]);
        totalTime = 500;
    }
    if ((player == null)) {
        (player = new import15.NoOpAnimationPlayer());
    }
    player.onDone(() => {
        player.destroy();
        import13.renderStyles(element, view.renderer, import13.prepareFinalAnimationStyles(startStateStyles, endStateStyles));
    });
    new import11.AnimationSequencePlayer(previousPlayers).destroy();
    import13.renderStyles(element, view.renderer, import13.clearStyles(startStateStyles));
    view.animationContext.queueAnimation(element, 'translateTab', player);
    return new import10.AnimationTransition(player, currentState, nextState, totalTime);
}
var renderType_MdTabBody = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_MdTabBody, { translateTab: MdTabBody_translateTab_factory });
export class View_MdTabBody0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdTabBody0, renderType_MdTabBody, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
        this._expr_9 = import1.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_PortalHostDirective_0 = new import16.QueryList();
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'md-tab-body-content'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._vc_2 = new import17.ViewContainer(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import19.TemplateRef_(this, 2, this._anchor_2);
        this._PortalHostDirective_2_6 = new import18.Wrapper_PortalHostDirective(this.parentView.injectorGet(import20.ComponentFactoryResolver, this.parentIndex), this._vc_2.vcRef);
        this._text_3 = this.renderer.createText(this._el_0, '\n', null);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this._viewQuery_PortalHostDirective_0.reset([this._PortalHostDirective_2_6.context]);
        this.context._portalHost = this._viewQuery_PortalHostDirective_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._text_4
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import19.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import21.PortalHostDirective) && (2 === requestNodeIndex))) {
            return this._PortalHostDirective_2_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_9 = this.context._position;
        if (import3.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            var animationTransition_translateTab = this.componentType.animations['translateTab'](this, this._el_0, ((this._expr_9 == import1.UNINITIALIZED) ? 'void' : this._expr_9), ((currVal_9 == import1.UNINITIALIZED) ? 'void' : currVal_9));
            animationTransition_translateTab.onStart(this.handleEvent_0.bind(this).bind(this, '@translateTab.start'));
            animationTransition_translateTab.onDone(this.handleEvent_0.bind(this).bind(this, '@translateTab.done'));
            this._expr_9 = currVal_9;
        }
        const currVal_2_0_0 = '';
        this._PortalHostDirective_2_6.check_portal(currVal_2_0_0, throwOnChange, false);
        this._PortalHostDirective_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
    }
    destroyInternal() {
        this._vc_2.destroyNestedViews();
        this._PortalHostDirective_2_6.ngOnDestroy();
    }
    detachInternal() {
        var animationTransition_translateTab = this.componentType.animations['translateTab'](this, this._el_0, this._expr_9, 'void');
        animationTransition_translateTab.onStart(this.handleEvent_0.bind(this).bind(this, '@translateTab.start'));
        animationTransition_translateTab.onDone(this.handleEvent_0.bind(this).bind(this, '@translateTab.done'));
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 2)) {
            return new View_MdTabBody1(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    }
    handleEvent_0(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == '@translateTab.start')) {
            const pd_sub_0 = (this.context._onTranslateTabStarted($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == '@translateTab.done')) {
            const pd_sub_1 = (this.context._onTranslateTabComplete($event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    }
}
class View_MdTabBody1 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdTabBody1, renderType_MdTabBody, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._el_0 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : []), null);
        return null;
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
//# sourceMappingURL=tab-body.ngfactory.js.map