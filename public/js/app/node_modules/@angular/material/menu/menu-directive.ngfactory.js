/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/material/menu/menu-directive';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/query_list';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from './menu.css';
import * as import10 from '@angular/core/src/animation/animation_transition';
import * as import11 from '@angular/core/src/animation/animation_sequence_player';
import * as import12 from '@angular/core/src/animation/animation_styles';
import * as import13 from '@angular/core/src/animation/animation_style_util';
import * as import14 from '@angular/core/src/animation/animation_keyframe';
import * as import15 from '@angular/core/src/animation/animation_player';
import * as import16 from '@angular/core/src/linker/view_container';
import * as import17 from '@angular/core/src/linker/template_ref';
import * as import18 from '../../common/src/directives/ng_class.ngfactory';
import * as import19 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import20 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import21 from '@angular/core/src/linker/element_ref';
import * as import22 from '@angular/common/src/directives/ng_class';
export var Wrapper_MdMenu = (function () {
    function Wrapper_MdMenu(p0, p1) {
        this._changed = false;
        this.context = new import0.MdMenu(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_MdMenu.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdMenu.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_MdMenu.prototype.check_classList = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.classList = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_MdMenu.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdMenu.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MdMenu.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdMenu.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.close.subscribe(_eventHandler.bind(view, 'close')));
        }
    };
    return Wrapper_MdMenu;
}());
var renderType_MdMenu_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_MdMenu_Host0 = (function (_super) {
    __extends(View_MdMenu_Host0, _super);
    function View_MdMenu_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdMenu_Host0, renderType_MdMenu_Host, import7.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_MdMenu_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'md-menu', new import3.InlineArray2(2, 'role', 'menu'), rootSelector, null);
        this.compView_0 = new View_MdMenu0(this.viewUtils, this, 0, this._el_0);
        this._MdMenu_0_3 = new Wrapper_MdMenu(null, null);
        this._query_MdMenuItem_0_0 = new import6.QueryList();
        this.compView_0.create(this._MdMenu_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import8.ComponentRef_(0, this, this._el_0, this._MdMenu_0_3.context);
    };
    View_MdMenu_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.MdMenu) && (0 === requestNodeIndex))) {
            return this._MdMenu_0_3.context;
        }
        return notFoundResult;
    };
    View_MdMenu_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._MdMenu_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdMenuItem_0_0.dirty) {
                this._query_MdMenuItem_0_0.reset([]);
                this._MdMenu_0_3.context.items = this._query_MdMenuItem_0_0;
                this._query_MdMenuItem_0_0.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._MdMenu_0_3.context.ngAfterContentInit();
            }
        }
        this.compView_0.detectChanges(throwOnChange);
    };
    View_MdMenu_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._MdMenu_0_3.ngOnDestroy();
    };
    View_MdMenu_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_MdMenu_Host0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    };
    return View_MdMenu_Host0;
}(import2.AppView));
export var MdMenuNgFactory = new import8.ComponentFactory('md-menu, mat-menu', View_MdMenu_Host0, import0.MdMenu);
var styles_MdMenu = [import9.styles];
var MdMenu_transformMenu_states = {
    showing: {
        opacity: '1',
        transform: 'scale(1)'
    },
    '*': {},
    void: {}
};
function MdMenu_transformMenu_factory(view, element, currentState, nextState) {
    var previousPlayers = view.animationContext.getAnimationPlayers(element, 'transformMenu', (nextState == 'void'));
    var collectedStyles = {};
    var player = null;
    var totalTime = 0;
    var defaultStateStyles = MdMenu_transformMenu_states['*'];
    var startStateStyles = MdMenu_transformMenu_states[currentState];
    if ((startStateStyles == null)) {
        (startStateStyles = defaultStateStyles);
    }
    var endStateStyles = MdMenu_transformMenu_states[nextState];
    if ((endStateStyles == null)) {
        (endStateStyles = defaultStateStyles);
    }
    if (((player == null) && ((currentState == 'void') && true))) {
        player = new import11.AnimationSequencePlayer([view.renderer.animate(element, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [
                startStateStyles,
                {
                    opacity: '0',
                    transform: 'scale(0)'
                }
            ])), import13.balanceAnimationKeyframes(collectedStyles, endStateStyles, [
                new import14.AnimationKeyframe(0, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}]))),
                new import14.AnimationKeyframe(1, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}])))
            ]), 200, 0, 'cubic-bezier(0.25, 0.8, 0.25, 1)', previousPlayers)]);
        totalTime = 200;
    }
    if (((player == null) && (true && (nextState == 'void')))) {
        player = new import11.AnimationSequencePlayer([view.renderer.animate(element, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [startStateStyles])), [
                new import14.AnimationKeyframe(0, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{ opacity: 'true' }]))),
                new import14.AnimationKeyframe(1, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{ opacity: '0' }])))
            ], 50, 100, 'linear', previousPlayers)]);
        totalTime = 150;
    }
    if ((player == null)) {
        (player = new import15.NoOpAnimationPlayer());
    }
    player.onDone(function () {
        player.destroy();
        import13.renderStyles(element, view.renderer, import13.prepareFinalAnimationStyles(startStateStyles, endStateStyles));
    });
    new import11.AnimationSequencePlayer(previousPlayers).destroy();
    import13.renderStyles(element, view.renderer, import13.clearStyles(startStateStyles));
    view.animationContext.queueAnimation(element, 'transformMenu', player);
    return new import10.AnimationTransition(player, currentState, nextState, totalTime);
}
var MdMenu_fadeInItems_states = {
    showing: { opacity: '1' },
    '*': {},
    void: {}
};
function MdMenu_fadeInItems_factory(view, element, currentState, nextState) {
    var previousPlayers = view.animationContext.getAnimationPlayers(element, 'fadeInItems', (nextState == 'void'));
    var collectedStyles = {};
    var player = null;
    var totalTime = 0;
    var defaultStateStyles = MdMenu_fadeInItems_states['*'];
    var startStateStyles = MdMenu_fadeInItems_states[currentState];
    if ((startStateStyles == null)) {
        (startStateStyles = defaultStateStyles);
    }
    var endStateStyles = MdMenu_fadeInItems_states[nextState];
    if ((endStateStyles == null)) {
        (endStateStyles = defaultStateStyles);
    }
    if (((player == null) && ((currentState == 'void') && true))) {
        player = new import11.AnimationSequencePlayer([view.renderer.animate(element, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [
                startStateStyles,
                { opacity: '0' }
            ])), import13.balanceAnimationKeyframes(collectedStyles, endStateStyles, [
                new import14.AnimationKeyframe(0, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}]))),
                new import14.AnimationKeyframe(1, new import12.AnimationStyles(import13.collectAndResolveStyles(collectedStyles, [{}])))
            ]), 200, 100, 'cubic-bezier(0.55, 0, 0.55, 0.2)', previousPlayers)]);
        totalTime = 300;
    }
    if ((player == null)) {
        (player = new import15.NoOpAnimationPlayer());
    }
    player.onDone(function () {
        player.destroy();
        import13.renderStyles(element, view.renderer, import13.prepareFinalAnimationStyles(startStateStyles, endStateStyles));
    });
    new import11.AnimationSequencePlayer(previousPlayers).destroy();
    import13.renderStyles(element, view.renderer, import13.clearStyles(startStateStyles));
    view.animationContext.queueAnimation(element, 'fadeInItems', player);
    return new import10.AnimationTransition(player, currentState, nextState, totalTime);
}
var renderType_MdMenu = import3.createRenderComponentType('', 1, import5.ViewEncapsulation.None, styles_MdMenu, {
    transformMenu: MdMenu_transformMenu_factory,
    fadeInItems: MdMenu_fadeInItems_factory
});
export var View_MdMenu0 = (function (_super) {
    __extends(View_MdMenu0, _super);
    function View_MdMenu0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdMenu0, renderType_MdMenu, import7.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_MdMenu0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_TemplateRef_0 = new import6.QueryList();
        this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_0 = new import16.ViewContainer(0, null, this, this._anchor_0);
        this._TemplateRef_0_4 = new import17.TemplateRef_(this, 0, this._anchor_0);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._viewQuery_TemplateRef_0.reset([this._TemplateRef_0_4]);
        this.context.templateRef = this._viewQuery_TemplateRef_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._anchor_0,
            this._text_1
        ]), null);
        return null;
    };
    View_MdMenu0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.TemplateRef) && (0 === requestNodeIndex))) {
            return this._TemplateRef_0_4;
        }
        return notFoundResult;
    };
    View_MdMenu0.prototype.detectChangesInternal = function (throwOnChange) {
        this._vc_0.detectChangesInNestedViews(throwOnChange);
    };
    View_MdMenu0.prototype.destroyInternal = function () {
        this._vc_0.destroyNestedViews();
    };
    View_MdMenu0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 0)) {
            return new View_MdMenu1(this.viewUtils, this, 0, this._anchor_0, this._vc_0);
        }
        return null;
    };
    return View_MdMenu0;
}(import2.AppView));
var View_MdMenu1 = (function (_super) {
    __extends(View_MdMenu1, _super);
    function View_MdMenu1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_MdMenu1, renderType_MdMenu, import7.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_9 = import1.UNINITIALIZED;
        this._expr_10 = import1.UNINITIALIZED;
    }
    View_MdMenu1.prototype.createInternal = function (rootSelector) {
        this._text_0 = this.renderer.createText(null, '\n  ', null);
        this._el_1 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'class', 'md-menu-panel'), null);
        this._NgClass_1_3 = new import18.Wrapper_NgClass(this.parentView.injectorGet(import19.IterableDiffers, this.parentIndex), this.parentView.injectorGet(import20.KeyValueDiffers, this.parentIndex), new import21.ElementRef(this._el_1), this.renderer);
        this._text_2 = this.renderer.createText(this._el_1, '\n    ', null);
        this._el_3 = import3.createRenderElement(this.renderer, this._el_1, 'div', new import3.InlineArray2(2, 'class', 'md-menu-content'), null);
        this._text_4 = this.renderer.createText(this._el_3, '\n      ', null);
        this.projectNodes(this._el_3, 0);
        this._text_5 = this.renderer.createText(this._el_3, '\n    ', null);
        this._text_6 = this.renderer.createText(this._el_1, '\n  ', null);
        this._text_7 = this.renderer.createText(null, '\n', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_1, new import3.InlineArray4(4, 'keydown', null, 'click', null), this.eventHandler(this.handleEvent_1));
        this.init(this._text_7, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._text_5,
            this._text_6,
            this._text_7
        ]), [disposable_0]);
        return null;
    };
    View_MdMenu1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import22.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 6)))) {
            return this._NgClass_1_3.context;
        }
        return notFoundResult;
    };
    View_MdMenu1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_9 = 'showing';
        if (import3.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            var animationTransition_transformMenu = this.componentType.animations['transformMenu'](this, this._el_1, ((this._expr_9 == import1.UNINITIALIZED) ? 'void' : this._expr_9), ((currVal_9 == import1.UNINITIALIZED) ? 'void' : currVal_9));
            animationTransition_transformMenu.onStart(this.handleEvent_1.bind(this).bind(this, '@transformMenu.start'));
            animationTransition_transformMenu.onDone(this.handleEvent_1.bind(this).bind(this, '@transformMenu.done'));
            this._expr_9 = currVal_9;
        }
        var currVal_10 = 'showing';
        if (import3.checkBinding(throwOnChange, this._expr_10, currVal_10)) {
            var animationTransition_fadeInItems = this.componentType.animations['fadeInItems'](this, this._el_3, ((this._expr_10 == import1.UNINITIALIZED) ? 'void' : this._expr_10), ((currVal_10 == import1.UNINITIALIZED) ? 'void' : currVal_10));
            animationTransition_fadeInItems.onStart(import3.noop.bind(this).bind(this, '@fadeInItems.start'));
            animationTransition_fadeInItems.onDone(import3.noop.bind(this).bind(this, '@fadeInItems.done'));
            this._expr_10 = currVal_10;
        }
        var currVal_1_0_0 = 'md-menu-panel';
        this._NgClass_1_3.check_klass(currVal_1_0_0, throwOnChange, false);
        var currVal_1_0_1 = this.parentView.context._classList;
        this._NgClass_1_3.check_ngClass(currVal_1_0_1, throwOnChange, false);
        this._NgClass_1_3.ngDoCheck(this, this._el_1, throwOnChange);
    };
    View_MdMenu1.prototype.detachInternal = function () {
        var animationTransition_transformMenu = this.componentType.animations['transformMenu'](this, this._el_1, this._expr_9, 'void');
        animationTransition_transformMenu.onStart(this.handleEvent_1.bind(this).bind(this, '@transformMenu.start'));
        animationTransition_transformMenu.onDone(this.handleEvent_1.bind(this).bind(this, '@transformMenu.done'));
        var animationTransition_fadeInItems = this.componentType.animations['fadeInItems'](this, this._el_3, this._expr_10, 'void');
        animationTransition_fadeInItems.onStart(import3.noop.bind(this).bind(this, '@fadeInItems.start'));
        animationTransition_fadeInItems.onDone(import3.noop.bind(this).bind(this, '@fadeInItems.done'));
    };
    View_MdMenu1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._text_0, ctx);
        cb(this._el_1, ctx);
        cb(this._text_7, ctx);
    };
    View_MdMenu1.prototype.handleEvent_1 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'keydown')) {
            var pd_sub_0 = (this.parentView.context._keyManager.onKeydown($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'click')) {
            var pd_sub_1 = (this.parentView.context._emitCloseEvent() !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    return View_MdMenu1;
}(import2.AppView));
//# sourceMappingURL=menu-directive.ngfactory.js.map