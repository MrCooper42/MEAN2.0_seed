/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/material/menu/menu-item';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/linker/view_container';
import * as import10 from '../../common/src/directives/ng_if.ngfactory';
import * as import11 from '@angular/core/src/linker/template_ref';
import * as import12 from '@angular/common/src/directives/ng_if';
import * as import13 from '../core/ripple/ripple.ngfactory';
import * as import14 from '@angular/core/src/zone/ng_zone';
import * as import15 from '@angular/material/core/overlay/position/viewport-ruler';
import * as import16 from '@angular/material/core/ripple/ripple';
export class Wrapper_MdMenuItem {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import0.MdMenuItem(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_disabled(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_0 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_1 = this.context._tabindex;
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementAttribute(el, 'tabindex', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
        const currVal_2 = this.context.disabled;
        if (import3.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            view.renderer.setElementAttribute(el, 'disabled', ((currVal_2 == null) ? null : currVal_2.toString()));
            this._expr_2 = currVal_2;
        }
        const currVal_3 = this.context.isAriaDisabled;
        if (import3.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            view.renderer.setElementAttribute(el, 'aria-disabled', ((currVal_3 == null) ? null : currVal_3.toString()));
            this._expr_3 = currVal_3;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = (this.context._checkDisabled($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_MdMenuItem_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_MdMenuItem_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdMenuItem_Host0, renderType_MdMenuItem_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'div', new import3.InlineArray4(4, 'md-menu-item', '', 'role', 'menuitem'), rootSelector, null);
        this.compView_0 = new View_MdMenuItem0(this.viewUtils, this, 0, this._el_0);
        this._MdMenuItem_0_3 = new Wrapper_MdMenuItem(this.renderer, new import8.ElementRef(this._el_0));
        this.compView_0.create(this._MdMenuItem_0_3.context);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import7.ComponentRef_(0, this, this._el_0, this._MdMenuItem_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.MdMenuItem) && (0 === requestNodeIndex))) {
            return this._MdMenuItem_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdMenuItem_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._MdMenuItem_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    }
    handleEvent_0(eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdMenuItem_0_3.handleEvent(eventName, $event) && result);
        return result;
    }
}
export const MdMenuItemNgFactory = new import7.ComponentFactory('[md-menu-item], [mat-menu-item]', View_MdMenuItem_Host0, import0.MdMenuItem);
const styles_MdMenuItem = [];
var renderType_MdMenuItem = import3.createRenderComponentType('', 1, import5.ViewEncapsulation.None, styles_MdMenuItem, {});
export class View_MdMenuItem0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdMenuItem0, renderType_MdMenuItem, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.projectNodes(parentRenderNode, 0);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_1 = new import9.ViewContainer(1, null, this, this._anchor_1);
        this._TemplateRef_1_5 = new import11.TemplateRef_(this, 1, this._anchor_1);
        this._NgIf_1_6 = new import10.Wrapper_NgIf(this._vc_1.vcRef, this._TemplateRef_1_5);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._anchor_1,
            this._text_2
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import11.TemplateRef) && (1 === requestNodeIndex))) {
            return this._TemplateRef_1_5;
        }
        if (((token === import12.NgIf) && (1 === requestNodeIndex))) {
            return this._NgIf_1_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_1_0_0 = !this.context.disabled;
        this._NgIf_1_6.check_ngIf(currVal_1_0_0, throwOnChange, false);
        this._NgIf_1_6.ngDoCheck(this, this._anchor_1, throwOnChange);
        this._vc_1.detectChangesInNestedViews(throwOnChange);
    }
    destroyInternal() {
        this._vc_1.destroyNestedViews();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 1)) {
            return new View_MdMenuItem1(this.viewUtils, this, 1, this._anchor_1, this._vc_1);
        }
        return null;
    }
}
class View_MdMenuItem1 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdMenuItem1, renderType_MdMenuItem, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray8(6, 'class', 'md-menu-ripple', 'md-ripple', '', 'md-ripple-background-color', 'rgba(0,0,0,0)'), null);
        this._MdRipple_0_3 = new import13.Wrapper_MdRipple(new import8.ElementRef(this._el_0), this.parentView.injectorGet(import14.NgZone, this.parentIndex), this.parentView.injectorGet(import15.ViewportRuler, this.parentIndex));
        this._text_1 = this.renderer.createText(this._el_0, '\n', null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import16.MdRipple) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) {
            return this._MdRipple_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = this.parentView.context._getHostElement();
        this._MdRipple_0_3.check_trigger(currVal_0_0_0, throwOnChange, false);
        const currVal_0_0_1 = 'rgba(0,0,0,0)';
        this._MdRipple_0_3.check_backgroundColor(currVal_0_0_1, throwOnChange, false);
        this._MdRipple_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._MdRipple_0_3.checkHost(this, this, this._el_0, throwOnChange);
    }
    destroyInternal() {
        this._MdRipple_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
//# sourceMappingURL=menu-item.ngfactory.js.map