/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button/button';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/material/core/ripple/ripple';
import * as import5 from '@angular/common/src/localization';
import * as import7 from '@angular/core/src/i18n/tokens';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/linker/view';
import * as import10 from '@angular/core/src/linker/view_utils';
import * as import12 from '@angular/core/src/metadata/view';
import * as import13 from '@angular/core/src/linker/view_type';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from './button.css';
import * as import17 from '@angular/core/src/linker/view_container';
import * as import18 from '../../common/src/directives/ng_if.ngfactory';
import * as import19 from '@angular/core/src/linker/template_ref';
import * as import20 from '@angular/common/src/directives/ng_if';
import * as import21 from '../core/ripple/ripple.ngfactory';
import * as import22 from '@angular/core/src/zone/ng_zone';
import * as import23 from '@angular/material/core/overlay/position/viewport-ruler';
class MdButtonModuleInjector extends import0.NgModuleInjector {
    constructor(parent) {
        super(parent, [], []);
    }
    get _NgLocalization_4() {
        if ((this.__NgLocalization_4 == null)) {
            (this.__NgLocalization_4 = new import5.NgLocaleLocalization(this.parent.get(import7.LOCALE_ID)));
        }
        return this.__NgLocalization_4;
    }
    get _MATERIAL_COMPATIBILITY_MODE_5() {
        if ((this.__MATERIAL_COMPATIBILITY_MODE_5 == null)) {
            (this.__MATERIAL_COMPATIBILITY_MODE_5 = false);
        }
        return this.__MATERIAL_COMPATIBILITY_MODE_5;
    }
    createInternal() {
        this._CommonModule_0 = new import2.CommonModule();
        this._DefaultStyleCompatibilityModeModule_1 = new import3.DefaultStyleCompatibilityModeModule();
        this._MdRippleModule_2 = new import4.MdRippleModule();
        this._MdButtonModule_3 = new import1.MdButtonModule();
        return this._MdButtonModule_3;
    }
    getInternal(token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_1;
        }
        if ((token === import4.MdRippleModule)) {
            return this._MdRippleModule_2;
        }
        if ((token === import1.MdButtonModule)) {
            return this._MdButtonModule_3;
        }
        if ((token === import5.NgLocalization)) {
            return this._NgLocalization_4;
        }
        if ((token === import3.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_5;
        }
        return notFoundResult;
    }
    destroyInternal() {
    }
}
export const MdButtonModuleNgFactory = new import0.NgModuleFactory(MdButtonModuleInjector, import1.MdButtonModule);
export class Wrapper_MdButton {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import1.MdButton(p0, p1);
        this._expr_0 = import8.UNINITIALIZED;
        this._expr_1 = import8.UNINITIALIZED;
        this._expr_2 = import8.UNINITIALIZED;
        this._expr_3 = import8.UNINITIALIZED;
        this._expr_4 = import8.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_disableRipple(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.disableRipple = currValue;
            this._expr_0 = currValue;
        }
    }
    check_disabled(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_1 = currValue;
        }
    }
    check_color(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.color = currValue;
            this._expr_2 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_3 = this.context.disabled;
        if (import10.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            view.renderer.setElementProperty(el, 'disabled', currVal_3);
            this._expr_3 = currVal_3;
        }
        const currVal_4 = this.context._isKeyboardFocused;
        if (import10.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementClass(el, 'md-button-focus', currVal_4);
            this._expr_4 = currVal_4;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        if ((eventName == 'mousedown')) {
            const pd_sub_0 = (this.context._setMousedown() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'focus')) {
            const pd_sub_1 = (this.context._setKeyboardFocus() !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'blur')) {
            const pd_sub_2 = (this.context._removeKeyboardFocus() !== false);
            result = (pd_sub_2 && result);
        }
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
export class Wrapper_MdAnchor {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import1.MdAnchor(p0, p1);
        this._expr_0 = import8.UNINITIALIZED;
        this._expr_1 = import8.UNINITIALIZED;
        this._expr_2 = import8.UNINITIALIZED;
        this._expr_3 = import8.UNINITIALIZED;
        this._expr_4 = import8.UNINITIALIZED;
        this._expr_5 = import8.UNINITIALIZED;
        this._expr_6 = import8.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_color(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.color = currValue;
            this._expr_0 = currValue;
        }
    }
    check_disabled(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_1 = currValue;
        }
    }
    check_disableRipple(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import10.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.disableRipple = currValue;
            this._expr_2 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_3 = this.context.disabled;
        if (import10.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            view.renderer.setElementAttribute(el, 'disabled', ((currVal_3 == null) ? null : currVal_3.toString()));
            this._expr_3 = currVal_3;
        }
        const currVal_4 = this.context._isKeyboardFocused;
        if (import10.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementClass(el, 'md-button-focus', currVal_4);
            this._expr_4 = currVal_4;
        }
        const currVal_5 = this.context.tabIndex;
        if (import10.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementProperty(el, 'tabIndex', currVal_5);
            this._expr_5 = currVal_5;
        }
        const currVal_6 = this.context.isAriaDisabled;
        if (import10.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            view.renderer.setElementAttribute(el, 'aria-disabled', ((currVal_6 == null) ? null : currVal_6.toString()));
            this._expr_6 = currVal_6;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        if ((eventName == 'mousedown')) {
            const pd_sub_0 = (this.context._setMousedown() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'focus')) {
            const pd_sub_1 = (this.context._setKeyboardFocus() !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'blur')) {
            const pd_sub_2 = (this.context._removeKeyboardFocus() !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'click')) {
            const pd_sub_3 = (this.context._haltDisabledEvents($event) !== false);
            result = (pd_sub_3 && result);
        }
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_MdButton_Host = import10.createRenderComponentType('', 0, import12.ViewEncapsulation.None, [], {});
class View_MdButton_Host0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdButton_Host0, renderType_MdButton_Host, import13.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import10.selectOrCreateRenderHostElement(this.renderer, 'button', new import10.InlineArray2(2, 'md-button', ''), rootSelector, null);
        this.compView_0 = new View_MdButton0(this.viewUtils, this, 0, this._el_0);
        this._MdButton_0_3 = new Wrapper_MdButton(new import15.ElementRef(this._el_0), this.renderer);
        this.compView_0.create(this._MdButton_0_3.context);
        var disposable_0 = import10.subscribeToRenderElement(this, this._el_0, new import10.InlineArray8(6, 'mousedown', null, 'focus', null, 'blur', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import14.ComponentRef_(0, this, this._el_0, this._MdButton_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdButton) && (0 === requestNodeIndex))) {
            return this._MdButton_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._MdButton_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this._MdButton_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    }
    handleEvent_0(eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdButton_0_3.handleEvent(eventName, $event) && result);
        return result;
    }
}
export const MdButtonNgFactory = new import14.ComponentFactory('button[md-button], button[md-raised-button], button[md-icon-button], button[md-fab], button[md-mini-fab]', View_MdButton_Host0, import1.MdButton);
const styles_MdButton = [import16.styles];
var renderType_MdButton = import10.createRenderComponentType('', 1, import12.ViewEncapsulation.None, styles_MdButton, {});
export class View_MdButton0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdButton0, renderType_MdButton, import13.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckOnce);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import10.createRenderElement(this.renderer, parentRenderNode, 'span', new import10.InlineArray2(2, 'class', 'md-button-wrapper'), null);
        this.projectNodes(this._el_0, 0);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_2 = new import17.ViewContainer(2, null, this, this._anchor_2);
        this._TemplateRef_2_5 = new import19.TemplateRef_(this, 2, this._anchor_2);
        this._NgIf_2_6 = new import18.Wrapper_NgIf(this._vc_2.vcRef, this._TemplateRef_2_5);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n', null);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_5 = import10.createRenderElement(this.renderer, parentRenderNode, 'div', new import10.InlineArray2(2, 'class', 'md-button-focus-overlay'), null);
        this._text_6 = this.renderer.createText(parentRenderNode, '\n', null);
        var disposable_0 = import10.subscribeToRenderElement(this, this._el_5, new import10.InlineArray2(2, 'touchstart', null), this.eventHandler(this.handleEvent_5));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._text_4,
            this._el_5,
            this._text_6
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import19.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import20.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_2_0_0 = !this.context._isRippleDisabled();
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
    }
    destroyInternal() {
        this._vc_2.destroyNestedViews();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 2)) {
            return new View_MdButton1(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    }
    handleEvent_5(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'touchstart')) {
            const pd_sub_0 = ($event.preventDefault() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}
class View_MdButton1 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdButton1, renderType_MdButton, import13.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_2 = import8.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = import10.createRenderElement(this.renderer, null, 'div', new import10.InlineArray8(6, 'class', 'md-button-ripple', 'md-ripple', '', 'md-ripple-background-color', 'rgba(0, 0, 0, 0)'), null);
        this._MdRipple_0_3 = new import21.Wrapper_MdRipple(new import15.ElementRef(this._el_0), this.parentView.injectorGet(import22.NgZone, this.parentIndex), this.parentView.injectorGet(import23.ViewportRuler, this.parentIndex));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import4.MdRipple) && (0 === requestNodeIndex))) {
            return this._MdRipple_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = this.parentView.context.getHostElement();
        this._MdRipple_0_3.check_trigger(currVal_0_0_0, throwOnChange, false);
        const currVal_0_0_1 = (this.parentView.context.isRoundButton() ? 'rgba(255, 255, 255, 0.2)' : '');
        this._MdRipple_0_3.check_color(currVal_0_0_1, throwOnChange, false);
        const currVal_0_0_2 = 'rgba(0, 0, 0, 0)';
        this._MdRipple_0_3.check_backgroundColor(currVal_0_0_2, throwOnChange, false);
        this._MdRipple_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_2 = this.parentView.context.isRoundButton();
        if (import10.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'md-button-ripple-round', currVal_2);
            this._expr_2 = currVal_2;
        }
        this._MdRipple_0_3.checkHost(this, this, this._el_0, throwOnChange);
    }
    destroyInternal() {
        this._MdRipple_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
var renderType_MdAnchor_Host = import10.createRenderComponentType('', 0, import12.ViewEncapsulation.None, [], {});
class View_MdAnchor_Host0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdAnchor_Host0, renderType_MdAnchor_Host, import13.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import10.selectOrCreateRenderHostElement(this.renderer, 'a', new import10.InlineArray2(2, 'md-button', ''), rootSelector, null);
        this.compView_0 = new View_MdAnchor0(this.viewUtils, this, 0, this._el_0);
        this._MdAnchor_0_3 = new Wrapper_MdAnchor(new import15.ElementRef(this._el_0), this.renderer);
        this.compView_0.create(this._MdAnchor_0_3.context);
        var disposable_0 = import10.subscribeToRenderElement(this, this._el_0, new import10.InlineArray8(8, 'mousedown', null, 'focus', null, 'blur', null, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import14.ComponentRef_(0, this, this._el_0, this._MdAnchor_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdAnchor) && (0 === requestNodeIndex))) {
            return this._MdAnchor_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MdAnchor_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._MdAnchor_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    }
    handleEvent_0(eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdAnchor_0_3.handleEvent(eventName, $event) && result);
        return result;
    }
}
export const MdAnchorNgFactory = new import14.ComponentFactory('a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]', View_MdAnchor_Host0, import1.MdAnchor);
const styles_MdAnchor = [import16.styles];
var renderType_MdAnchor = import10.createRenderComponentType('', 1, import12.ViewEncapsulation.None, styles_MdAnchor, {});
export class View_MdAnchor0 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MdAnchor0, renderType_MdAnchor, import13.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import10.createRenderElement(this.renderer, parentRenderNode, 'span', new import10.InlineArray2(2, 'class', 'md-button-wrapper'), null);
        this.projectNodes(this._el_0, 0);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_2 = new import17.ViewContainer(2, null, this, this._anchor_2);
        this._TemplateRef_2_5 = new import19.TemplateRef_(this, 2, this._anchor_2);
        this._NgIf_2_6 = new import18.Wrapper_NgIf(this._vc_2.vcRef, this._TemplateRef_2_5);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n', null);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_5 = import10.createRenderElement(this.renderer, parentRenderNode, 'div', new import10.InlineArray2(2, 'class', 'md-button-focus-overlay'), null);
        this._text_6 = this.renderer.createText(parentRenderNode, '\n', null);
        var disposable_0 = import10.subscribeToRenderElement(this, this._el_5, new import10.InlineArray2(2, 'touchstart', null), this.eventHandler(this.handleEvent_5));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._text_4,
            this._el_5,
            this._text_6
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import19.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import20.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_2_0_0 = !this.context._isRippleDisabled();
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
    }
    destroyInternal() {
        this._vc_2.destroyNestedViews();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 2)) {
            return new View_MdAnchor1(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    }
    handleEvent_5(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'touchstart')) {
            const pd_sub_0 = ($event.preventDefault() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}
class View_MdAnchor1 extends import9.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_MdAnchor1, renderType_MdAnchor, import13.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_2 = import8.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = import10.createRenderElement(this.renderer, null, 'div', new import10.InlineArray8(6, 'class', 'md-button-ripple', 'md-ripple', '', 'md-ripple-background-color', 'rgba(0, 0, 0, 0)'), null);
        this._MdRipple_0_3 = new import21.Wrapper_MdRipple(new import15.ElementRef(this._el_0), this.parentView.injectorGet(import22.NgZone, this.parentIndex), this.parentView.injectorGet(import23.ViewportRuler, this.parentIndex));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import4.MdRipple) && (0 === requestNodeIndex))) {
            return this._MdRipple_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = this.parentView.context.getHostElement();
        this._MdRipple_0_3.check_trigger(currVal_0_0_0, throwOnChange, false);
        const currVal_0_0_1 = (this.parentView.context.isRoundButton() ? 'rgba(255, 255, 255, 0.2)' : '');
        this._MdRipple_0_3.check_color(currVal_0_0_1, throwOnChange, false);
        const currVal_0_0_2 = 'rgba(0, 0, 0, 0)';
        this._MdRipple_0_3.check_backgroundColor(currVal_0_0_2, throwOnChange, false);
        this._MdRipple_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_2 = this.parentView.context.isRoundButton();
        if (import10.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'md-button-ripple-round', currVal_2);
            this._expr_2 = currVal_2;
        }
        this._MdRipple_0_3.checkHost(this, this, this._el_0, throwOnChange);
    }
    destroyInternal() {
        this._MdRipple_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
//# sourceMappingURL=button.ngfactory.js.map