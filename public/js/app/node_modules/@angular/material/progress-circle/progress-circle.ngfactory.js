/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/progress-circle/progress-circle';
import * as import2 from '@angular/material/core/compatibility/default-mode';
import * as import4 from '@angular/core/src/change_detection/change_detection';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/core/src/zone/ng_zone';
import * as import12 from '@angular/core/src/linker/element_ref';
import * as import13 from './progress-circle.css.shim';
var MdProgressCircleModuleInjector = (function (_super) {
    __extends(MdProgressCircleModuleInjector, _super);
    function MdProgressCircleModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(MdProgressCircleModuleInjector.prototype, "_MATERIAL_COMPATIBILITY_MODE_2", {
        get: function () {
            if ((this.__MATERIAL_COMPATIBILITY_MODE_2 == null)) {
                (this.__MATERIAL_COMPATIBILITY_MODE_2 = false);
            }
            return this.__MATERIAL_COMPATIBILITY_MODE_2;
        },
        enumerable: true,
        configurable: true
    });
    MdProgressCircleModuleInjector.prototype.createInternal = function () {
        this._DefaultStyleCompatibilityModeModule_0 = new import2.DefaultStyleCompatibilityModeModule();
        this._MdProgressCircleModule_1 = new import1.MdProgressCircleModule();
        return this._MdProgressCircleModule_1;
    };
    MdProgressCircleModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_0;
        }
        if ((token === import1.MdProgressCircleModule)) {
            return this._MdProgressCircleModule_1;
        }
        if ((token === import2.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_2;
        }
        return notFoundResult;
    };
    MdProgressCircleModuleInjector.prototype.destroyInternal = function () {
    };
    return MdProgressCircleModuleInjector;
}(import0.NgModuleInjector));
export var MdProgressCircleModuleNgFactory = new import0.NgModuleFactory(MdProgressCircleModuleInjector, import1.MdProgressCircleModule);
export var Wrapper_MdProgressCircle = (function () {
    function Wrapper_MdProgressCircle(p0, p1, p2) {
        this._changed = false;
        this.context = new import1.MdProgressCircle(p0, p1, p2);
        this._expr_0 = import4.UNINITIALIZED;
        this._expr_1 = import4.UNINITIALIZED;
        this._expr_2 = import4.UNINITIALIZED;
        this._expr_3 = import4.UNINITIALIZED;
        this._expr_4 = import4.UNINITIALIZED;
        this._expr_5 = import4.UNINITIALIZED;
    }
    Wrapper_MdProgressCircle.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdProgressCircle.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
    };
    Wrapper_MdProgressCircle.prototype.check_value = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.value = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_MdProgressCircle.prototype.check_mode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import6.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.mode = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_MdProgressCircle.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdProgressCircle.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_2 = this.context._ariaValueMin;
        if (import6.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            view.renderer.setElementAttribute(el, 'aria-valuemin', ((currVal_2 == null) ? null : currVal_2.toString()));
            this._expr_2 = currVal_2;
        }
        var currVal_3 = this.context._ariaValueMax;
        if (import6.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            view.renderer.setElementAttribute(el, 'aria-valuemax', ((currVal_3 == null) ? null : currVal_3.toString()));
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this.context.value;
        if (import6.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementAttribute(el, 'aria-valuenow', ((currVal_4 == null) ? null : currVal_4.toString()));
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this.context.mode;
        if (import6.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementAttribute(el, 'mode', ((currVal_5 == null) ? null : currVal_5.toString()));
            this._expr_5 = currVal_5;
        }
    };
    Wrapper_MdProgressCircle.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdProgressCircle.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MdProgressCircle;
}());
export var Wrapper_MdSpinner = (function () {
    function Wrapper_MdSpinner(p0, p1, p2) {
        this._changed = false;
        this.context = new import1.MdSpinner(p0, p1, p2);
    }
    Wrapper_MdSpinner.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MdSpinner.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
    };
    Wrapper_MdSpinner.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MdSpinner.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MdSpinner.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MdSpinner.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MdSpinner;
}());
var renderType_MdProgressCircle_Host = import6.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {});
var View_MdProgressCircle_Host0 = (function (_super) {
    __extends(View_MdProgressCircle_Host0, _super);
    function View_MdProgressCircle_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdProgressCircle_Host0, renderType_MdProgressCircle_Host, import9.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import4.ChangeDetectorStatus.CheckAlways);
    }
    View_MdProgressCircle_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer, 'md-progress-circle', new import6.InlineArray2(2, 'role', 'progressbar'), rootSelector, null);
        this.compView_0 = new View_MdProgressCircle0(this.viewUtils, this, 0, this._el_0);
        this._MdProgressCircle_0_3 = new Wrapper_MdProgressCircle(this.compView_0.ref, this.injectorGet(import11.NgZone, this.parentIndex), new import12.ElementRef(this._el_0));
        this.compView_0.create(this._MdProgressCircle_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import10.ComponentRef_(0, this, this._el_0, this._MdProgressCircle_0_3.context);
    };
    View_MdProgressCircle_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdProgressCircle) && (0 === requestNodeIndex))) {
            return this._MdProgressCircle_0_3.context;
        }
        return notFoundResult;
    };
    View_MdProgressCircle_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (this._MdProgressCircle_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this._MdProgressCircle_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_MdProgressCircle_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._MdProgressCircle_0_3.ngOnDestroy();
    };
    View_MdProgressCircle_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_MdProgressCircle_Host0;
}(import5.AppView));
export var MdProgressCircleNgFactory = new import10.ComponentFactory('md-progress-circle, mat-progress-circle', View_MdProgressCircle_Host0, import1.MdProgressCircle);
var styles_MdProgressCircle = [import13.styles];
var renderType_MdProgressCircle = import6.createRenderComponentType('', 0, import8.ViewEncapsulation.Emulated, styles_MdProgressCircle, {});
export var View_MdProgressCircle0 = (function (_super) {
    __extends(View_MdProgressCircle0, _super);
    function View_MdProgressCircle0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdProgressCircle0, renderType_MdProgressCircle, import9.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import4.ChangeDetectorStatus.CheckOnce);
    }
    View_MdProgressCircle0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_1 = import6.createRenderElement(this.renderer, parentRenderNode, ':svg:svg', new import6.InlineArray4(4, 'preserveAspectRatio', 'xMidYMid meet', 'viewBox', '0 0 100 100'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n  ', null);
        this._el_3 = import6.createRenderElement(this.renderer, this._el_1, ':svg:path', import6.EMPTY_INLINE_ARRAY, null);
        this._text_4 = this.renderer.createText(this._el_1, '\n', null);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._text_5
        ]), null);
        return null;
    };
    return View_MdProgressCircle0;
}(import5.AppView));
var renderType_MdSpinner_Host = import6.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {});
var View_MdSpinner_Host0 = (function (_super) {
    __extends(View_MdSpinner_Host0, _super);
    function View_MdSpinner_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdSpinner_Host0, renderType_MdSpinner_Host, import9.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import4.ChangeDetectorStatus.CheckAlways);
    }
    View_MdSpinner_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer, 'md-spinner', new import6.InlineArray4(4, 'mode', 'indeterminate', 'role', 'progressbar'), rootSelector, null);
        this.compView_0 = new View_MdSpinner0(this.viewUtils, this, 0, this._el_0);
        this._MdSpinner_0_3 = new Wrapper_MdSpinner(this.compView_0.ref, new import12.ElementRef(this._el_0), this.injectorGet(import11.NgZone, this.parentIndex));
        this.compView_0.create(this._MdSpinner_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import10.ComponentRef_(0, this, this._el_0, this._MdSpinner_0_3.context);
    };
    View_MdSpinner_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdSpinner) && (0 === requestNodeIndex))) {
            return this._MdSpinner_0_3.context;
        }
        return notFoundResult;
    };
    View_MdSpinner_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._MdSpinner_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_MdSpinner_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._MdSpinner_0_3.ngOnDestroy();
    };
    View_MdSpinner_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_MdSpinner_Host0;
}(import5.AppView));
export var MdSpinnerNgFactory = new import10.ComponentFactory('md-spinner, mat-spinner', View_MdSpinner_Host0, import1.MdSpinner);
var styles_MdSpinner = [import13.styles];
var renderType_MdSpinner = import6.createRenderComponentType('', 0, import8.ViewEncapsulation.Emulated, styles_MdSpinner, {});
export var View_MdSpinner0 = (function (_super) {
    __extends(View_MdSpinner0, _super);
    function View_MdSpinner0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MdSpinner0, renderType_MdSpinner, import9.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import4.ChangeDetectorStatus.CheckAlways);
    }
    View_MdSpinner0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_1 = import6.createRenderElement(this.renderer, parentRenderNode, ':svg:svg', new import6.InlineArray4(4, 'preserveAspectRatio', 'xMidYMid meet', 'viewBox', '0 0 100 100'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n  ', null);
        this._el_3 = import6.createRenderElement(this.renderer, this._el_1, ':svg:path', import6.EMPTY_INLINE_ARRAY, null);
        this._text_4 = this.renderer.createText(this._el_1, '\n', null);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._text_5
        ]), null);
        return null;
    };
    return View_MdSpinner0;
}(import5.AppView));
//# sourceMappingURL=progress-circle.ngfactory.js.map